
##==============================================================================
##Stuff that only works at Carmen!

# Run with SGE at Carmen
config_module:carmenqueuesystem
queue_system_module:SGE

# Settings for Carmen
default_checkout:master
[checkout_location]
default:~/work/${TEXTTEST_CHECKOUT_NAME}/Testing/TextTest
nightly_publish:/usr/local/share/texttest
weekly_publish:/usr/local/share/texttest
[end]

default_major_release:none

# ---------------- Values needed to run in batch mode at Carmen -------------------

# Machines where we can start Xvfb
#virtual_display_machine:reedsville
virtual_display_machine:fougamou
virtual_display_machine:singleton

# For each "special batch" run, specify recipients, time limit, architectures and versions 
# Not present means $USER as recipient, no time limit, all versions and all architectures accepted
[batch_recipients]
default:carmen.testtool_tests
local:$USER

[batch_version]
nightly_publish:master
weekly_publish:master
default:i386_linux
default:sparc
# disabled due to too many suspension-kills. Is in any case on the way out
#default:parisc_2_0
default:powerpc
default:lsf
default:sge
default:carmen
# collect coverage info with local batch runs...
local:cover

[batch_use_collection]
default:true
local:false

# ---------------- Values for the static GUI -------------------

[version_priority]
powerpc:1
sparc:1
queuesystem:2
carmen:3
[end]

[view_program]
overview*:mozilla
[end]

[gui_entry_overrides]
auto-replay_in_dynamic_gui:1
temporary_result_directory:/carm/proj/matador2/publish/coach.texttest_tmp
version_to_reconnect_to:master.i386_linux
[end]

# GUI configuration, drop-down lists to appear in static gui...
[gui_entry_options]
use_checkout:/usr/local/share/texttest
use_checkout:/carm/master/Testing/TextTest
run_this_version:sparc
run_this_version:parisc_2_0
version_to_reconnect_to:master.i386_linux
version_to_reconnect_to:master.sparc
version_to_reconnect_to:master.powerpc
request_lsf_queue:waiting
[end]

[batch_result_repository]
default:/carm/proj/texttest/html/TestStateRepository

[historical_report_location]
default:/carm/proj/texttest/html/TestResults
[end]

unsaveable_version:master
unsaveable_version:i386_linux

## end of stuff only for use at Carmen
## ================================================================

# Path to the binary
binary:${TEXTTEST_CHECKOUT}/bin/texttest.py

[run_dependent_text]
output*:TextTest will write diagnostics
output*:{INTERNAL writedir}{REPLACE <test write dir>}
output*:[^/]*[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9][0-9][0-9]{REPLACE <target tmp dir>}
output:test-case.* on .*new results.*missing results.*differences{WORD -13}
output:test-case.* on .*new results.*differences{WORD -9}
output:test-case.* on .*missing results.*differences{WORD -9}
output:test-case.* on .*new results{WORD -6}
output:test-case.* on .*missing results{WORD -6}
output:test-case.* on .*differences{WORD -5}
output:test-case.* on .*:${WORD -2}
output:second to retry
output:creating batch report{WORD 2}
output:Killing running test{WORD -1}
# Sometimes needed under heavy machine load
output:signal 15
output:signal 9
output:Killed process{WORD 3}
output:sec[^ ]* on{WORD -1}
output:Sending mail from{WORD 5}
output:What is your name{LINES 3}
output:batch_recipients{WORD 2}
output:batch_sender{WORD 2}
output:[0-9]* and [0-9]* bytes{REPLACE <file sizes>}
targetReport:{INTERNAL writedir}{REPLACE <test write dir>}
targetReport:[^ ]*@localhost{REPLACE <username>@localhost}
targetReport: on .*test-case.*under{WORD -7}
targetReport:[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9]{REPLACE <today's date>}
targetReport:seconds on{WORD -1}
targetReport:TESTS FAILED{WORD -2}
catalogue:.nfs
catalogue:[^-]*[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9][0-9][0-9]{REPLACE <texttest tmp dir>}
catalogue:[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9]{REPLACE <today's date>}
# Files that shouldn't mean anything...
catalogue:cmd
catalogue:unixperf
# Only filtered on windows
catalogue:tdat.*cmp
catalogue:hello.*cmp
catalogue:dip.*cmp
catalogues:{INTERNAL writedir}{REPLACE <test write dir>}
catalogues:[^/]*[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9][0-9][0-9]{REPLACE <target tmp dir>}
errors:{INTERNAL writedir}{REPLACE <test write dir>}
errors:RENDER
errors:File .* line .* in
errors:CountTest.__del__
errors:TransSocketUNIX
errors:Import failed
errors:Warning: Tried to connect to session manager
# shell errors from kill
errors:fake_xvfb_server
errors:^sh:.*kill
errors:root directory does not exist{WORD -1}
errors:TextTest.*requires at least{WORD 2}{REPLACE <version>}
errors:Could not start TextTest{WORD 5}{REPLACE <version>}
*gui_log:{INTERNAL writedir}{REPLACE <test write dir>}
*gui_log:[^/]*[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9][0-9][0-9]{REPLACE <target tmp dir>}
*gui_log:+ PID{WORD 3}
*gui_log:started at{WORD -1}{REPLACE <date/time>}
*gui_log:tests at{WORD -1}{REPLACE <date/time>}
dynamic_gui_log:Running on{WORD -1}{REPLACE <machine>}
dynamic_gui_log:succeeded on{WORD -1}{REPLACE <machine>}
dynamic_gui_log:FAILED on{WORD -2}{REPLACE <machine>}
dynamic_gui_log:not be run on{WORD -2}{REPLACE <machine>}
dynamic_gui_log:tests started at{WORD -1}{REPLACE <date/time>}
dynamic_gui_log:tests completed at{WORD 13}{REPLACE <date/time>}
dynamic_gui_log:From log file reckoned
dynamic_gui_log:seconds on{WORD -1}
dynamic_gui_log:^Reckoned to be{WORD 4+}{REPLACE <percent> complete at <date/time>}
# Unfortunately race conditions mean we can't reliably look at these
dynamic_gui_log:Temporary Files
# Traffic tests. Can't filter them there because then we can't tell when they're different...
dynamic_gui_log:The time is now{WORD 5+}{REPLACE <ASCII time>}
dynamic_gui_log:The process ID is{WORD -1}{REPLACE <pid>}
gui_log:  File "
gui_log:\[Reported by.*at{WORD 3}{REPLACE <user>}
gui_log:\[Reported by.*at{WORD 5}{REPLACE <date/time>}
gui_log:Showing component versions{LINES 5}{REPLACE <version info>}
# diff output
dynamic_gui_log:1,2c1
jusecaseprops:record{WORD -1}
usecase:usecase filtering 3 lines{LINES 3}
traffic:{INTERNAL writedir}{REPLACE <test write dir>}
traffic:[^/]*[0-9][0-9][A-Z][a-z][a-z][0-9][0-9][0-9][0-9][0-9][0-9]{REPLACE <target tmp dir>}
[end]

[unordered_text]
gui_log:Dynamic run failed{LINES 3}
[end]

[failure_severity]
errors:1
*gui_log:1
target*:1
shortcut:1
targetReport:1
[end]

[failure_display_priority]
errors:1
[end]

[diagnostics]
write_directory_variable:TEXTTEST_DIAGDIR
configuration_file_variable:TEXTTEST_LOGCONFIG
[end]

# Force recomputation of files on non-UNIX archs
home_operating_system:posix

# Official name of the application
full_name:TextTest

# List of (generally directories) to copy from the test directory to the write directory
# because we want to write there.
partial_copy_test_path:TargetApp
partial_copy_test_path:texttesttmp
partial_copy_test_path:repository
copy_test_path:file_edits
copy_test_path:usecases

[test_data_environment]
TargetApp:TEXTTEST_HOME
texttesttmp:TEXTTEST_TMP
personaldir:TEXTTEST_PERSONAL_CONFIG
usecases:USECASE_HOME
[end]

test_data_ignore:*pyc

# List of constant input files to create links to. Will copy them on Windows as symbolic links
# don't exist.
link_test_path:personaldir
# pick a name for any config modules we might write...
link_test_path:customconfig.py
# be able to block modules entirely
link_test_path:gtk.py
# Put method interceptions in here
link_test_path:interceptor.py
# Fake queue system directory...
link_test_path:qsub
link_test_path:qdel
link_test_path:sgehostfile
# Faked versions of LSF commands...
link_test_path:bsub
link_test_path:bkill

collect_traffic:bugcli
collect_traffic:time
collect_traffic:rsh
collect_traffic:xdpyinfo
collect_traffic:interpretcore.py
collect_traffic:cvs
collect_traffic:Xvfb

[collect_traffic_environment]
time:TEXTTEST_HOME
time:TEXTTEST_TMP
time:TIME_TO_BUSYWAIT
[end]

# Tell it that we want to track what files are created
create_catalogues:true

# And here's where to find interactive action overrides...
interactive_action_module:texttestgui

# Settings for creation of test cases
use_case_record_mode:GUI

# Things to collate
[collate_file]
targetMem:TargetApp/*/memory.mem*
targetReport:texttesttmp/*/batchreport*
rootTestSuite:TargetApp/testsuite.*
level1TestSuite:TargetApp/*/testsuite.*
level2TestSuite:TargetApp/*/*/testsuite.*
errorsrec:texttesttmp/*/record/record_errors.log
outputrec:texttesttmp/*/record/record_output.log
errorsrep:texttesttmp/*/record/replay_errors.log
outputrep:texttesttmp/*/record/replay_output.log
gui_select:texttesttmp/*/dynamic_run*/gui_select
jusecaseprops:texttesttmp/*/*/jusecase.properties
filterfile*:TargetApp/filter_files/filter*
overview:report/*/test_[a-z]*.html
overview_all:report/*/test_*_all.html
overview_1day:report/*/test_*_18Jan2006.html
overview_1day_ver:report/*/test_*_26Jan2006*.html
[end]

definition_file_stems:dynamic_usecase
definition_file_stems:reconnect_usecase
definition_file_stems:record_usecase
definition_file_stems:replay_usecase
definition_file_stems:target_record_usecase
definition_file_stems:target_input

# Run the LSF and SGE tests too...
extra_version:sge
extra_version:lsf

## ================================================================
## more stuff only for use at Carmen
extra_version:carmen

# Path to the binary - override this so we run our shell script
binary:${TEXTTEST_CHECKOUT}/bin/texttest
