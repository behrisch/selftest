# Path to the binary under test
binary:${SOURCE_PATH}/texttest.py

[run_dependent_text]
output:checkout{WORD -1}
output:BadApplication{WORD -1}
output:Reconnecting to test results{WORD -1}
output:Faking start
output:not a core dump{WORD 1}
output:FAILED on{WORD 6}
output:still in use
output:Killing running test{WORD -1}
output:Killed process{WORD 3}
targetReport:FAILED on{WORD 4}
targetReport:tests ran{WORD 1}
targetReport:{LINE 1}
catalogue:.nfs
catalogue:subdirectory TargetApp/dip
catalogue:subdirectory TargetApp/core
errors:RENDER
errors:\.py
errors:CountTest.__del__
[end]

# Official name of the application
full_name:TextTest

# List of (generally directories) to copy from the test directory to the write directory
# because we want to write there.
copy_test_path:TargetApp

# List of constant input files to create links to. Will copy them on Windows as symbolic links
# don't exist.
link_test_path:wibble.py
link_test_path:config

# Tell it that we want to track what files are created
create_catalogues:true

# Things to collate
[collate_file]
targetMem:TargetApp/Failures/memory.mem
targetReport:TargetApp/batchreport*
[end]

# Programs for viewing files
view_program:emacs

# Run the LSF tests too...
extra_version:lsf

# But don't save them as a separate version
unsaveable_version:lsf

# Which configuration to use. 3 are provided: any number can be written by the user.
# Corresponds to the name of a python module containing a configuration to be loaded.
# Provided are:

# default    - works anywhere, in theory
# unixConfig - works anywhere on UNIX (uses UNIX tools such as tkdiff and sendmail)
# lsf        - works on UNIX with Platform's LSF installed for load-balanced running
# across a network. 
config_module:unixConfig

# And here's where to find interactive action overrides...
interactive_action_module:texttestgui

# Settings for creation of test cases
use_standard_input:1
