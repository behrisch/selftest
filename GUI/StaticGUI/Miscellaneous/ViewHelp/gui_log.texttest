Enabling entry completion, using matching 1

Waiting for application event 'all tests to be read' to occur.
Adding entry completion '<default>' ...
Adding entry completion '1' ...
Adding entry completion '/carm/proj/texttest-tmp/geoff/texttest.08Jul173202.19307/texttest/GUI/StaticGUI/Miscellaneous/ViewHelp/TargetApp/Diagnostics/log4py.conf' ...
Adding entry completion '/carm/proj/texttest-tmp/geoff/texttest.08Jul173202.19307/texttest/GUI/StaticGUI/Miscellaneous/ViewHelp/TargetApp/Diagnostics' ...
Adding entry completion '/carm/proj/texttest-tmp/geoff/texttest.08Jul173202.19307/texttest/GUI/StaticGUI/Miscellaneous/ViewHelp/texttesttmp' ...
Top Window title is TextTest static GUI : management of tests for DIP
Default widget is <type 'gtk.TreeView'>
Setting window width to 60% of screen.
Setting window height to 83% of screen.

Viewing toggle action with title '_Toolbar'
Viewing toggle action with title '_Shortcut bar'
Viewing toggle action with title '_Status bar'
Viewing action with title '_Quit', stock id ''gtk-quit'', accelerator ''<control>q''
Viewing action with title 'View File', stock id ''gtk-open'' (greyed out)
Viewing action with title '_File Properties', stock id ''gtk-properties'' (greyed out)
Viewing action with title 'View In Editor', stock id ''gtk-open'' (greyed out)
Viewing action with title '_Copy', stock id ''gtk-copy'', accelerator ''<control>c'' (greyed out)
Viewing action with title '_Cut', stock id ''gtk-cut'', accelerator ''<control>x'' (greyed out)
Viewing action with title '_Paste', stock id ''gtk-paste'', accelerator ''<control>v'' (greyed out)
Viewing action with title 'Add Test', stock id ''gtk-add'', accelerator ''<control>n'' (greyed out)
Viewing action with title 'Add Suite', stock id ''gtk-add'' (greyed out)
Viewing action with title 'Add Application', stock id ''gtk-add''
Viewing action with title 'Create _File', stock id ''gtk-new'' (greyed out)
Viewing action with title 'Enter Failure Information', stock id ''gtk-info'', accelerator ''<control>i'' (greyed out)
Viewing action with title 'Refresh', stock id ''gtk-refresh'', accelerator ''F5''
Viewing action with title 'Show only selected' (greyed out)
Viewing action with title 'Hide selected' (greyed out)
Viewing action with title 'Show all'
Viewing action with title 'R_eset', stock id ''gtk-revert-to-saved'', accelerator ''<control>e''
Viewing action with title '_Rename...', stock id ''gtk-italic'', accelerator ''<control>m'' (greyed out)
Viewing action with title 'Remove...', stock id ''gtk-delete'', accelerator ''<control>Delete'' (greyed out)
Viewing action with title '_Sort Test Suite File', stock id ''gtk-sort-ascending'' (greyed out)
Viewing action with title '_Reversed Sort Test Suite File', stock id ''gtk-sort-descending'' (greyed out)
Viewing action with title 'Move to first', stock id ''gtk-goto-top'', accelerator ''<control>Home'' (greyed out)
Viewing action with title 'Move up', stock id ''gtk-go-up'', accelerator ''<control>Page_Up'' (greyed out)
Viewing action with title 'Move down', stock id ''gtk-go-down'', accelerator ''<control>Page_Down'' (greyed out)
Viewing action with title 'Move to last', stock id ''gtk-goto-bottom'', accelerator ''<control>End'' (greyed out)
Viewing action with title '_Load Selection...', stock id ''gtk-open'', accelerator ''<control><shift>o''
Viewing action with title 'S_ave Selection...', stock id ''gtk-save-as'', accelerator ''<control><shift>s'' (greyed out)
Viewing action with title '_Migration Notes'
Viewing action with title 'Component _Versions'
Viewing action with title '_About TextTest', stock id ''gtk-about''
Viewing action with title '_Select', stock id ''gtk-find'', accelerator ''<control>s''
Viewing action with title 'Filter', stock id ''gtk-find'', accelerator ''<control>f''
Viewing action with title '_Run', stock id ''gtk-execute'', accelerator ''<control>r'' (greyed out)
Viewing action with title '_Run', stock id ''gtk-execute'', accelerator ''<control>r'' (greyed out)
Viewing action with title 'Record _Use-Case', stock id ''gtk-media-record'', accelerator ''F9'' (greyed out)
Viewing action with title 'Re_connect', stock id ''gtk-connect'', accelerator ''<control><shift>r'' (greyed out)

UI layout: 
<ui>
  <menubar name="MainMenuBar">
    <menu name="filemenu" action="filemenu">
      <placeholder name="FirstInFileMenu">
        <menuitem name="Load Selection..." action="Load Selection..."/>
        <separator/>
      </placeholder>
      <menuitem name="Save Selection..." action="Save Selection..."/>
      <separator/>
      <menuitem name="Quit" action="Quit"/>
    </menu>
    <menu name="editmenu" action="editmenu">
      <menuitem name="Add Test" action="Add Test"/>
      <menuitem name="Add Suite" action="Add Suite"/>
      <menuitem name="Add Application" action="Add Application"/>
      <separator/>
      <menuitem name="Cut" action="Cut"/>
      <menuitem name="Copy" action="Copy"/>
      <menuitem name="Paste" action="Paste"/>
      <menuitem name="Remove..." action="Remove..."/>
      <menuitem name="Rename..." action="Rename..."/>
      <separator/>
      <menuitem name="Enter Failure Information" action="Enter Failure Information"/>
      <separator/>
      <menuitem name="Move to first" action="Move to first"/>
      <menuitem name="Move up" action="Move up"/>
      <menuitem name="Move down" action="Move down"/>
      <menuitem name="Move to last" action="Move to last"/>
      <separator/>
      <menuitem name="Sort Test Suite File" action="Sort Test Suite File"/>
      <menuitem name="Reversed Sort Test Suite File" action="Reversed Sort Test Suite File"/>
      <separator/>
    </menu>
    <menu name="viewmenu" action="viewmenu">
      <placeholder name="FirstInViewMenu">
        <menuitem name="Show only selected" action="Show only selected"/>
        <menuitem name="Hide selected" action="Hide selected"/>
        <menuitem name="Show all" action="Show all"/>
        <separator/>
      </placeholder>
      <menuitem name="Toolbar" action="Toolbar"/>
      <menuitem name="Shortcut bar" action="Shortcut bar"/>
      <menuitem name="Status bar" action="Status bar"/>
    </menu>
    <menu name="actionsmenu" action="actionsmenu">
      <menuitem name="Select" action="Select"/>
      <menuitem name="Filter" action="Filter"/>
      <separator/>
      <menuitem name="Refresh" action="Refresh"/>
      <menuitem name="Run" action="Run"/>
      <menuitem name="Reconnect" action="Reconnect"/>
      <menuitem name="Record Use-Case" action="Record Use-Case"/>
      <menuitem name="Reset" action="Reset"/>
    </menu>
    <placeholder name="ExtraMenus">
    </placeholder>
    <menu name="helpmenu" action="helpmenu">
      <menuitem name="Migration Notes" action="Migration Notes"/>
      <separator/>
      <menuitem name="Component Versions" action="Component Versions"/>
      <separator/>
      <menuitem name="About TextTest" action="About TextTest"/>
    </menu>
  </menubar>
  <toolbar name="MainToolBar">
    <toolitem name="Quit" action="Quit"/>
    <separator/>
    <toolitem name="Select" action="Select"/>
    <toolitem name="Run" action="Run"/>
    <placeholder name="AfterRun">
    </placeholder>
    <separator/>
    <toolitem name="Remove..." action="Remove..."/>
    <separator/>
  </toolbar>
  <popup name="TestPopupMenu">
    <menuitem name="Add Test" action="Add Test"/>
    <menuitem name="Add Suite" action="Add Suite"/>
    <separator/>
    <menuitem name="Cut" action="Cut"/>
    <menuitem name="Copy" action="Copy"/>
    <menuitem name="Paste" action="Paste"/>
    <menuitem name="Rename..." action="Rename..."/>
    <menuitem name="Remove..." action="Remove..."/>
    <separator/>
    <menuitem name="Enter Failure Information" action="Enter Failure Information"/>
    <separator/>
    <menuitem name="Show only selected" action="Show only selected"/>
    <menuitem name="Hide selected" action="Hide selected"/>
    <separator/>
    <menu name="reordermenu" action="reordermenu">
      <menuitem name="Move to first" action="Move to first"/>
      <menuitem name="Move up" action="Move up"/>
      <menuitem name="Move down" action="Move down"/>
      <menuitem name="Move to last" action="Move to last"/>
      <separator/>
      <menuitem name="Sort Test Suite File" action="Sort Test Suite File"/>
      <menuitem name="Reversed Sort Test Suite File" action="Reversed Sort Test Suite File"/>
      <separator/>
    </menu>
  </popup>
  <popup name="TestFilePopupMenu">
    <menuitem name="View File" action="View File"/>
    <menuitem name="File Properties" action="File Properties"/>
    <separator/>
    <menuitem name="Create File" action="Create File"/>
    <separator/>
    <menuitem name="Remove..." action="Remove..."/>
    <separator/>
  </popup>
</ui>

Test Tree description...

Test column header set to 'Tests: All 0 selected'

Pane separator positioned 50% from the left edge

Tabs showing : Selection, Config

Viewing notebook page for 'Selection'
Viewing entry for option 'Tests for version' (drop-down list containing ['', '<default>'])
Viewing entry for option 'Test names containing'
Viewing entry for option 'Suite names containing'
Viewing entry for option 'App names containing'
Viewing entry for option 'Tests listed in file'
Viewing entry for option 'Descriptions containing'
Viewing entry for option 'Test-files containing'
Viewing entry for option 'Test-file to search' (drop-down list containing [''])
Viewing entry for option 'Execution time'
...........
Viewing check button for switch 'Select in collapsed suites'
Viewing radio button for switch '', options Discard/Refine/Extend/Exclude'. Default value 0.
Viewing action with title '_Select', stock id ''gtk-find'', accelerator ''<control>s''
...........
Viewing radio button for switch '', options Discard/Refine/Extend'. Default value 0.
Viewing action with title 'Filter', stock id ''gtk-find'', accelerator ''<control>f''

Changing GUI status to: 'TextTest started at 08Jul17:32:22.'

Changing GUI status to: 'Reading tests ...'

Changing GUI status to: 'Reading tests completed at 08Jul17:32:23.'

Test Tree description...
-> TargetApp (dip)
->   Game9952
->     S01.99
->     A01
->     S02
->     A02
->     S03
->     A03
->     S04
->     A04
->     S05
->     A05
->   npstIII
->     Game47
->       S01

Test column header set to 'Tests: 0/11 selected'

Viewing notebook page for 'Selection'
Viewing entry for option 'Tests for version' (drop-down list containing ['', '<default>'])
Viewing entry for option 'Test names containing'
Viewing entry for option 'Suite names containing'
Viewing entry for option 'App names containing'
Viewing entry for option 'Tests listed in file'
Viewing entry for option 'Descriptions containing'
Viewing entry for option 'Test-files containing'
Viewing entry for option 'Test-file to search' (set to 'output') (drop-down list containing ['output'])
Viewing entry for option 'Execution time'
...........
Viewing check button for switch 'Select in collapsed suites'
Viewing radio button for switch '', options Discard/Refine/Extend/Exclude'. Default value 0.
Viewing action with title '_Select', stock id ''gtk-find'', accelerator ''<control>s''
...........
Viewing radio button for switch '', options Discard/Refine/Extend'. Default value 0.
Viewing action with title 'Filter', stock id ''gtk-find'', accelerator ''<control>f''
Expected application event 'all tests to be read' occurred, proceeding.

'show texttest migration notes' event created with arguments ''
Adding entry completion 'output' ...
---------- Dialog 'TextTest Migration Notes' ----------
Default action is labelled 'gtk-close'
Adding migration notes from file 'MigrationNotes_from_3.10':

There isn't so much migration to do for this release. The biggest impact is likely to be the
log4x changes described below.

Lower down, this file also details behaviour of TextTest 3.11 which will be different from 
TextTest 3.10. You can probably figure much of this out by just seeing what happens...

=========================================================
COMPULSORY MIGRATION
=========================================================

(1) log4x configuration files (and 'trace level')
=================================================
If you're using TextTest's integration with log4x, the whole mechanism has been
removed as everything needed by it can be covered by other existing functionality.
This is mainly because the data files mechanism supports having application and version
suffices now, but also because there is now a TEXTTEST_SANDBOX variable.

So the [diagnostics] config entry is removed, and "logging" files are handled the same 
as others. For example, you may have previously had

[diagnostics]
configuration_file_variable:DIAGNOSTICS_FILE
write_directory_variable:DIAGNOSTICS_OUT
[end]

This can now be achieved via

link_test_path:logging

[test_data_environment]
logging:DIAGNOSTICS_FILE

in your config file.

The write_directory_variable is generally only important for applications that change 
directory internally. Others can just use relative paths and manage without it. 
If it's needed, you use the new functionality above by adding

DIAGNOSTICS_OUT:$TEXTTEST_SANDBOX

to your environment file. In this way your application can find the sandbox to write its logs to.

If you're using log4j and java, you can identify the properties file to use in a similar way:

[test_data_properties]
logging:my_props

The actual properties reuse the "test_data_environment" construct - TextTest sees properties
as the Java environment mechanism.

As an additional note, if you're upgrading from TextTest 3.8 or earlier you don't need to rename
all your files to be called "logging". Whatever they're called will work, just replace "logging"
with the currently used name above.

The 'trace_level_variable' functionality that came with this has not been preserved, as it was deemed too
specific to one environment. It's fairly easy to reproduce by hand anyway.

(2) Bugzilla plugin
===================
If you're using the bugzilla plugin, you'll find it now works on machines that don't have perl
installed, as it doesn't rely on the command line program "bugcli" any more (though it still
needs the cli.cgi script). You therefore now need to tell TextTest how to find this script via
the new config file entry "bug_system_script". For example:

[bug_system_script]
bugzilla:http://www.mysite.com/bugzilla/cli.cgi
[end]

(3) GUI configuration files
===========================
You will need to do some tweaking if you have configured "interactive_action_module" or changed 
the TextTest menu/toolbar layout by creating personal layout XML files.

The config file setting "interactive_action_module" now works in the same way as "config_module", 
i.e. it is a single entry, not a list any more. This may be less flexible but it was adequate for 
all current known uses, and the whole point was to make the two configuration mechanisms separate 
and similar.

XML file naming conventions are now associated with the GUI configuration modules. Naming is now
<GUI module>-dynamic.xml
<GUI module>-static.xml
<GUI module>.xml

depending on which GUI should be affected. (See "layout" directory of the source for examples)
(The _gui ending has no special meaning any more, so default_gui.xml still works, but refers 
to the module default_gui.py and not default.py)

(4) Batch collection scripts "batch.GenerateHistoricalReport" and "batch.CollectFiles" removed
==============================================================================================
Use -coll to build both the website and the email reports. To build just one of them,
use -coll web or -coll mail, as appropriate. Use of both these scripts directly is deprecated,
and batch.GenerateHistoricalReport is already removed.

(5) Name of 'marked' category changed
=====================================
If you refer to category "marked by user" in [test_colours], [file_colours] or "hide_test-category"
in configuration files, this should be changed to "marked" which is what the category is now called.

=========================================================
CHANGES IN DEFAULT BEHAVIOUR
=========================================================

(1) Prioritising between different TextTest files
=================================================

There has been a change in how TextTest handles the situation when a test-specific
file and a version-specific file conflict with each other. Historically, TextTest 
has always given the test-specific file priority but this has proven to be awkward 
a few times, and people have been calling for a change - which has now been introduced.
This applies to all files that apply at more than one level of the hierarchy :
data files, log configuration files (which are now data files also, see above), environment
files and knownbugs files.

As an example, if in your root suite you have
a file "environment.version" containing

MY_ENV_VAR:foo

and in your test you have a file "environment" containing

MY_ENV_VAR:bar

the question is what value should MY_ENV_VAR have when your application is called?

In TextTest 3.10 it is "bar". In TextTest 3.11 it is "foo".
Hopefully such conflicting situations are fairly rare. But this might require some
migration. Naturally, if in the above case you wish to preserve the 3.10 behaviour,
copying the "environment.version" file to the test directory would achieve this.
 
(2) "Update Info" and recomputing test results in the dynamic GUI
=================================================================
The "Update Info" button is gone, and is replaced by a new entry in the Actions menu,
"Recompute status" (generally done by pressing 'F5'). 

The automatic recomputation of completed tests when necessary is also gone, replaced 
by the same action. When TextTest discovers that a test's results are out of date for 
any reason, it will indicate this with a small refresh icon in the test tree view.
The user can then recompute it by selecting it and pressing F5 as above. TextTest 
checks this when tests are selected, and when they are saved.

Recomputation takes account of many more things than it did before and should hence
be more useful. 

- It can be applied to many tests simultaneously.
- It's possible to do it even if TextTest doesn't believe it's necessary.
- It will take into account if files have been deleted since the original calculation.
- It will behave correctly when a test is recomputed several times. 
- It will take account of changes to the config file in the meantime.
- It will work after a "fast" reconnect (the default version of reconnect)

(3) Multiple versions of tests in the static GUI
================================================

In TextTest 3.10, the static GUI creates an amalgamated "generic test" for each distinct test in the test
suite, irrespective of which versions the test actually applies to. This works OK, but the biggest problem
was that the static GUI is rather blind when it comes to starting tests. Its model didn't allow it to accurately
predict how many tests will be run, if any. This meant that

- Numbers in the status bar for how many tests have been started were sometimes wrong.
- It let you start inconsistent combinations and you only found out later that they were wrong.
- The dynamic GUI didn't know how many tests it had got until it had read them all. It started running them as 
they were read, which lead to the "hopping progress bar" phenomenon, where the speed
and even direction of the progress bar depends on the relative speed of running and reading tests.

TextTest 3.11's static GUI now reads the tests in the same way as the dynamic GUI but displays them in much
the same way as 3.10, i.e. one row can refer to several tests. The difference is that this is made explicit,
so the status bar messages now list both how many tests there are and how many of them are distinct. If such a 
row is selected you will therefore see that you have selected "2 tests, 1 distinct". 

Saving and Loading selections take account of this, so that it's possible to distinguish persistently
which versions of a test should be selected. Also copying and pasting works as expected, i.e. if you copy
a test in several versions the copy also exists in several versions. Previously it's been rather undefined
what happened there.

(4) File Creation in the static GUI
===================================
The "New File" tab is removed. Instead, there is an entry in the file view popup menu, which produces a dialog.
This will create files of the type indicated by which part of the file view is chosen, so can present a
more "focussed" drop-down list. It will also work for standard files which it didn't before. Files are
generally created in the test directory as before, but can also be created in data file subdirectories
if those are selected.

(5) Combining knownbugs files when running with versions
========================================================
Say you have reported some bugs for the default version and some for a specific version,
and thus have knownbugs.app and knownbugs.app.v1. Running version v1 would previously
ignore the stuff in knownbugs.app. Now both files will be read.

(6) Reconnect incompatibility
=============================
As often happens in releases TextTest 3.11 will not be able to reconnect to runs done by
TextTest 3.10. Nor will it be able to clean them up. If you rely on the feature that each
batch run wipes the previous one's log files you'll need to clean the last 3.10 run by hand.

(7) Cosmetic and layout changes
===============================
"Saving" tab is removed, replaced by "Save As" action in the File menu. "Save" still
exists and behaves as before (i.e. uses the settings from last time you did "Save As",
or the default ones as appropriate).
"Adding Test" and "Adding Suite" tabs are removed and replaced with dialogs available 
from the test popup menu and the Edit menu.
"Bugs" tab is removed and replaced by "Enter Failure Information" in the same places.
"Recording" tab has moved and can now be found under "Running" instead of under "Test".
"Update Info" button is renamed to "Recompute Status" and lives in the actions menu instead.

"Refresh" action has taken over the refresh icon, so "Select" now has a "Find" icon instead.
"Result file" entries in selection tab now renamed to "test-file" as they work with any file

There are therefore no more buttons between the file view and the textual info, and no more 
tabs alongside the textual info.

Adding migration notes from file 'MigrationNotes_from_3.9':

There isn't much migration to do in this release apart from upgrade PyGTK if you haven't done that 
yet. Most of the major work done for the 3.10 release is about improving the performance of various 
key operations, particularly in larger test suites. 

This file also details behaviour of TextTest 3.10 which will be different in TextTest 3.9. You can
probably figure much of this out by just seeing what happens...

=========================================================
COMPULSORY MIGRATION
=========================================================

(1) System requirements
=======================
You now need at least PyGTK 2.10 in the GUI (3.9 supported PyGTK 2.6)
This is due to serious bugs found in 2.6 which had been fixed in later versions, and an aim to
keep up to date with current development in PyGTK.

(Windows Vista is now also supported)

=========================================================
CHANGES IN DEFAULT BEHAVIOUR
=========================================================

(1) Reading tests visible in the GUI
====================================
Previously the GUI wouldn't come up until all the tests had been read. If file reading was
slow and the testsuite was large this could lead to long delays before observing anything.

Now the GUI comes up instantly and progress in how many tests have been read so far can be seen
in the test view column header.

While mostly an improvement, this has some side-effects. In environments where rendering
is very slow (using remote displays like VNC) it will probably take longer overall to
bring up the GUI. Also, the dynamic GUI progress bar can look a little odd : as we start
running tests before we know how many there will be the progress bar can bounce backwards
and forwards a bit as the number completed and total known are both increasing at the same
time.

We hope to address these issues in TextTest 3.11.

(2) Temporary directory structure	
=================================

This structure is laid out in a different way now to ensure every run writes under only
one temporary directory. This has two user implications :

a) It won't be possible to reconnect to TextTest 3.9 runs using TextTest 3.10.
b) TextTest 3.10 won't clean up old TextTest 3.9 runs in the way new runs of TextTest 3.9
would have done.

If you rely on the feature that one batch run removes temporary files written by the previous
one, it's a good idea to clean your 3.9 runs by hand before switching to 3.10,
otherwise they might stay there forever...

For advanced users who were used to traversing this structure, it's now organised by application.
When using a grid engine the remote process logs are now all written in a directory at the top
called "slavelogs" instead of in framework_tmp for each individual test.

(3) Copying tests (static GUI)
==============================
This has previously worked via the "Copying" tab. Now there are Cut/Copy/Paste entries in the 
test tree popup menu, with the expected shortcuts (Ctrl-X, Ctrl-C, Ctrl-V). Should be
possible to use it in much the same way as in e.g. Windows Explorer.

Note there is no visible effect of cutting a test currently. Changes are only performed when
pasting it.

(4) Virtual displays for GUI testing on UNIX
============================================
This has been decentralised, so that each test now starts a new instance of the virtual display
(Xvfb) and closes it again when done. The "virtual_display_machine" setting now has a different meaning :
it will only be used if starting the virtual display on the local host fails. (Previously
it indicated a single machine on which a global TextTest virtual display would be maintained).
The "virtual_display_number" setting is removed as there is no hardcoded display number to
use in any case.

The idea is to localise effects, minimise network traffic and occasional resource clashes
in the virtual server.

Unfortunately Xvfb has been observed to leak lock files sometimes, which can lead to occasional
GUI test failures due to lock file clashes. TextTest tries to work around this but it's difficult
to do so entirely reliably. If this problem occurs frequently you might need to clean up externally
to TextTest: look for files in /tmp/.X*-lock and /tmp/.X11-unix/.X*

(5) Cleaning temporary files when using grid engines
====================================================
Previously no temporary files have been removed until the dynamic GUI is closed. In large
test suites this can lead to a substantial delay closing the GUI while all tests are removed.

So TextTest will now make sure the remote processes do some cleaning when a grid engine is
used. In particular all files belonging to successful tests will be removed, and all test data
will be removed. To get the old behaviour of leaving everything until the GUI is closed,
specify the flag -keepslave, or the equivalent checkbox under the Advanced tab in the static GUI.

There is no difference in the behaviour when running tests locally, as removing files during
the process would slow down feedback.

(6) comparetest.RemoveObsoleteVersions -> comparetest.PrintObsoleteVersions
===========================================================================
This script is for tracking down superfluous versioned files, i.e. the situation
where output.app and output.app.2 are identical, rendering the existence of the second
one unnecessary. The old script was untested, a bit buggy and removed files directly in CVS, which
was not well liked. In consequence it was not used much. 

So we've cleaned up the script, renamed it to PrintObsoleteVersions, added a load of tests and fixed
a load of bugs. It now merely informs you of obsolete files, and leaves it up to you what to do
with them. It doesn't assume you use CVS for your version control either (!)

Adding migration notes from file 'MigrationNotes_from_3.8':

For the first time in a long time 3.9 tries to remove a bunch of dubious old features...

Anyway, this file is laid out in 3 sections: compulsory migration, removed features and
functionality that has moved around or looks a bit different in the GUI. This last section 
is mostly to resolve confusion and you can probably figure it out anyway without reading this.

=============================================================================================
COMPULSORY MIGRATION
=============================================================================================

(1) System requirements
=======================
You now need at least Python 2.4 and PyGTK 2.6 
(3.8 supported Python 2.3 and PyGTK 2.4, and even Python 2.2 for the console interface)

However on Windows XP you can throw away handle.exe, pslist.exe and pskill.exe. And
it no longer makes any difference if you're an administrator...
On Windows 2000 you need to keep just pskill.exe.

(2) Installation
================
The "install.py" script is removed. You don't need to explicitly install TextTest any more.
The "source" directory as a whole can be copied to anywhere in your file system and run in place,
or left where it is.

To run the self-tests now, set TEXTTEST_HOME to point to them (or copy/move them to your TEXTTEST_HOME)
and run the "configure_tests.py" script that is in tests/texttest. This will convert all the expected 
results to your local environment and comment out tests that cannot be run. This script is more or 
less what was left of "install.py" when the moving-stuff-around was removed.

(3) Personal configuration files
================================
These have changed name so they can live in a directory together. Previously, you could
have a personal config file in your home directory called .texttest and a personal
texttest GTK configuration file called .texttest-gtk.

Instead, create a directory in your home directory called .texttest. The personal config
file should be put there and named "config", and the GTK-file should be put there
and named ".gtkrc-2.0". If you wish to change the menus and toolbars, the XML files to configure
this also live in this directory (this possibility is a new feature). Note also that this
directory is now the one pointed out by the variable TEXTTEST_PERSONAL_CONFIG should you choose to
set it.

(4) Log4x configuration files
=============================
If you're using TextTest's integration with log4x, you need to rename all your log4x files and tweak
your configuration, and possibly even your code.

Up until now you've told TextTest the name of your log4x configuration file in your config file.
Log4py files have traditionally been called "log4py.conf" and log4j files "log4j.properties".
It has so far not been possible to use TextTest's normal application/version mechanisms to differentiate 
these from each other, which has been a bit restrictive sometimes.

Now, instead of expecting an "input directory_variable" and a "configuration_file" entry, the config file 
now just expects a "configuration_file_variable" entry which is a variable (environment or Java property) 
that will identify the file itself. All configuration files are called logging.<app>.<version> now and 
all of the usual TextTest conventions apply to them. 

So, your code needs to find the log4x configuration file via a single environment variable
or property that identifies the full path to the file instead of via one that points out the
directory and a hardcoded name. Your config file should be changed accordingly, and all
configuration files in your test suite renamed to "logging.<app>".

Note also that "temporary diagnostic mode" which was a part of the log4x integration does not exist any more. 
See below for more details.

=============================================================================================
FEATURES THAT ARE REMOVED AND WHAT TO DO INSTEAD
=============================================================================================

(1) Temporary diagnostic mode for log4x ("Run with target application diagnostics")
===================================================================================

There used to be a check box with the above name under Running/Basic. This was deemed to be 
causing complication for no good reason. The idea of temporarily enabling diagnostics to
be placed in a separate subdirectory called "Diagnostics" is no longer possible.

Naturally, you will still want to temporarily enable diagnostics/change your log4x configuration
files. There are two basic suggestions for what you could do:

a) Create a logging file using the "Create File" tab as before. Instead of checking "affect temporary
diagnostics mode only", provide a version ID (e.g. "diag" or "tmp"). Then run the test with that version,
saving the files if needed. Remove the files when done, if you remember. If using version control you can often
dispense with even the need to run a separate version by just reverting when done.

b) Copy the test (using the default options), change the logging "permanently" and remove the whole test 
again when you're done. This tends to be easier to remember to do the removal and hence less prone
to building up long-dead temporary files, but is a bit more work.

(2) Standard Input Recording
============================
There used to be a possibility to interactively record standard input from shell sessions.
This was a natty feature introduced in a fit of enthusiasm but seemed to be more trouble than
it's worth in practice. In practice it's always been easier to just create an input file by hand, 
and this feature has caused lots of trouble internally. So it's gone, and if you miss it you'll just
have to keep TextTest 3.8 :)

(3) Automatic performance measurement on Windows
================================================
This made use of pslist which isn't required any more. It never worked very well and I didn't think
it was worth keeping. Performance measurement on Windows will need to use the more standard way via
logging and extracting the information.

(4) Shell parsing of QUEUE_SYSTEM_RESOURCE (if using LSF or SGE)
================================================================
Most subprocess management is now done via Python 2.4's wonderful subprocess module (a feature 
Python has been sorely lacking in the past). One consequence of this is that TextTest isn't using 
the shell now unless absolutely necessary, and this is why I've been able to dump handle.exe and friends
on Windows.

A knockon consequence is that the QUEUE_SYSTEM_RESOURCE variable in your environment files won't be 
quite as flexible as before. Previously it would accept and largely ignore any shell quoting you put 
there, but now it won't work to put shell quoting there as the shell isn't run.

So
QUEUE_SYSTEM_RESOURCE:model=Opteron*
will work, but
QUEUE_SYSTEM_RESOURCE:model="Opteron*"
or
QUEUE_SYSTEM_RESOURCE:model=Opteron\*
won't.

=============================================================================================
CHANGES IN THE GUI LAYOUT AND WHERE TO FIND THINGS NOW
=============================================================================================

(1) Saving and Loading Selections
=================================

TextTest 3.9 introduces some improvements to the way test selections 
(OBSERVE: NOT test results!) are saved and accessed. Previously, all 
selections that were saved from the dynamic GUI were saved in a 
temporary location, which was read by the static GUI when the dynamic 
GUI terminated, and added to the drop-down list in the selection tab. 
Sometimes it took a long while before the drop-down list was updated, 
making it painful to exchange selections between GUIs. 

Now, all selection files are saved and accessed via standard 
FileChooser widgets. This makes it possible to save and load files 
to/from any location in the file system. Also, since the chooser reads
the file system directly, it is possible to access files immediately 
after saving them, even without terminating the dynamic GUI. The 
default is still to save to and load from a temporary location 
(temporary_filter_files), but a default persistent directory 
(filter_files) is also added as a standard location for selections you 
want to save permanently. Using the config option 
'test_list_files_directory' you can also add more directories under 
the application directory which will appear as shortcuts in the file 
chooser. (but of course you can also save anywhere else, the shortcut 
is just for convenience)

Observe that to save a selection you'll now have to choose 
'Save Selection...' in the File menu, the tab page has disappeared. 
There is also a "Load Selection" action in this menu where you can
select any file to load from the file system.

About the FileChooser: This is a standard GTK widget, so we're 
not responsible for its behavior in all aspects :) It is possible to use 
the + and - buttons in the botton left corner to add (and remove)
directories to the bottom shortcut list. These 'bookmarks' are saved 
in ~/.gtk-bookmarks and are added any time you use a FileChooser, 
also from other applications (Not sure about the exact details). However, 
if you have some preferred global location which you always want to have 
easy access to, adding it there can make your life easier.

(2) Popup menus
===============

These are more popular now :) Both the test view on the left and the file view on the right
will produce you a popup menu on being right-clicked and various functionality has moved to these.

For example there is now a dedicated Rename / Change Description action there, as well as sorting
and removing functionality.

The "Viewing" tab in the dynamic GUI has now been replaced by a popup menu in the file view. It had been
observed that it was a bit error prone and not very intuitive as things tended to appear and disappear at 
different times.

To start different viewers in the dynamic GUI now, right-click the file and select the view operation 
you want from the popup menu.

Double-clicking the files will now always view the filtered differences on the file, if there are any to view,
and bring up an editor on the (unfiltered) file if there aren't. There is no way to configure this any more.

When tests are still running and you double-click files, you won't get the "follow file progress" any more (using
whatever tool you've set in "follow_program"). You need to explicitly select it from the popup menu. Instead, you'll 
get the file in your editor, until you press "Update Info" when you'll get the differences so far.
(We discovered the follow-file functionality wasn't very popular and didn't merit being the default)

(3) Saving missing files
========================
Up until now saving missing files has simply removed them. This had led to problems
when the default version produces a file but some version does not, there was no good way
to represent this.

Now, if you save a missing file with a version identifier and the root (non-versioned) file
is present, instead of removing the file it will auto-generate a marker file to show that
this version should be missing. If you then run the test again it should be green, in both the
named version and the default version.

For example, suppose I have a test that produces

output.myapp
improve.myapp


However, version 2 only produces an output file, output.myapp.2. So when I run it I get
"improve missing".

Saving this with version 2 will now create a dummy file improve.myapp.2, which will tell
TextTest that there is no standard file for version 2, rather than have it compare
with improve.myapp.

This has been a bit of a pain for a while so hopefully it will be more convenient now.

Adding migration notes from file 'MigrationNotes_from_3.7':
Following on from the GUI changes in 3.7, version 3.8 is also a release which emphasises GUI
improvements. TextTest hopefully looks more like other GUIs than it used to: it has a proper
menubar, a proper toolbar and even some icons.

First, we should discuss compulsory migration though, then the GUI differences are discussed 
below.

=============================================================================================
COMPULSORY MIGRATION
=============================================================================================

(1) System requirements for GUI
===============================
GUI now requires at least Python 2.3 and PyGTK 2.4. (3.7.1 supported Python 2.2 and PyGTK 2.2)

(2) Config file changes
=======================

a) The "batch_version" setting now has no effect by default. You need to also set 
"batch_use_version_filtering:true" before anything will happen. This is because this mechanism
is only needed in a few circumstances (typically multi-release, multi-platform testing)
and it isn't really expected when batch sessions fail just because you run a version it wasn't
expecting.

b) "add_status_bar" and "add_shortcut_bar" are removed. In their place is a generic section
[hide_gui_element] (note it has the opposite sense!). This can have keys "menubar", "toolbar",
"shortcut_bar" and "status_bar" to achieve the same thing. Note these can also be hidden
at runtime using the View menu now so the need for them should be reduced.

c) "internal_error_text" and "internal_compulsory_text" are removed (see Section 3)

(3) Knownbugs files
===================

The format of these has been completely changed as it became unwieldy as more and more features
were added (and the files can now be generated directly from the GUI). A migration script 
is provided: if you have any knownbugs files you should run it
on your whole suite to convert them all to the new format:

texttest.py -s knownbugs.MigrateFiles

Each "bug" now gets a section to itself. It's probably easiest to use the static GUI to
report them in future rather than learning the new format though.

(4) Internal error settings
===========================

As reported above, the old Internal Errors mechanism is removed. The functionality is now covered
entirely by the Known Bugs mechanism. There is a migration script for this too:

texttest.py -s knownbugs.MigrateInternalErrors

Unfortunately, the relevant config file entries will simply be rejected by TextTest 3.8 though, so to use
this migration you'll need to temporarily re-insert them. Edit default.py, search for the setConfigDefault
statements and add there

app.setConfigDefault("internal_error_text", [])
app.setConfigDefault("internal_compulsory_text", [])

=============================================================================================
CHANGES IN BEHAVIOUR OF EXISTING FEATURES
=============================================================================================

(1) GUI layout
==============

In the past months TextTest has begun to be used by a lot of people who aren't developers. This
led to quite a few further usability enhancement requests.

General: Unifying the "viewed test" and the "selected tests"
------------------------------------------------------------
In TextTest 3.7.1 and earlier tests needed to be double clicked in the tree view to be viewed,
while they could be selected via a single click. It was quite possible to be viewing a different
test than the one(s) that were selected. As some actions acted on the viewed test and others
on the selected tests this caused confusion.

Therefore there is no longer any separate concept. Selecting a single test (single-clicking it)
will also view it. Good news for those who got RSI from all the double-clicking in TextTest :)

All the elements relating to the test that is being viewed are placed under a separate "Test" tab.
This tab is hidden when no tests are selected, but automatically chosen when tests are viewed. It
is also hidden in the static GUI when multiple tests are selected, though in the dynamic GUI it
remains as a "sample", as when saving multiple tests this information is often useful.

Changes in the static GUI 
-------------------------
(a) Viewing the config files in the static GUI

The old purple "application" rows are removed from the test tree view altogether now.
There is now a separate tab "Config" which displays the config files for all applications
together and also the personal configuration files, if any.

(b) Running options

Previously the Running options were subdivided into 4 groups, "What to Run", "How to Run",
"Side Effects" and "SGE/LSF". These are now regrouped into 2 tabs, "Basic" and "Advanced".
Hopefully the important stuff is easier to find.

(c) Reconnecting to previous results

Reconnecting to previously run results has previously been done by setting the "reconnect"
options in the running tabs and then pressing "Run". This is now separated and has its
own tab and button under the Running tab and is hopefully easier to use and more intuitive.

(d) New Files tab (replaces New Diagnostics button)

If you'd enabled TextTest's integration with log4x you'd have seen a "New Diagnostics" button
before, that helped create new log4x configuration files in the test structure. This is now
generalised and can create any sort of file of interest to TextTest. (It still works by
copying from more general places in the test suite and opening an editor). There is a tab
"New Files" under the Test tab.

Changes in the dynamic GUI
--------------------------
(a) Viewing running tests

Previously, whenever a yellow running test was selected, TextTest went off and gathered dynamic
information on how far through it was reckoned to be and created a partial comparison based on this.
This made it unwieldly to navigate the test tree view with the keyboard, as each test passed
over tried to get this information.

It is therefore no longer collected by default. A button called "Update Info" will perform this task
when requested. Note that running tests cannot be compared in tkdiff or equivalent until this
button is pressed now.

(b) Saving partial results

In version 3.7 there was a "Save Singel file" drop-down list under the Saving tab which could be used 
to save a single file from a test result without needing to save them all. This is now removed. Instead, 
(multi-)select the files from the file view. This also means that several files can be saved at once 
without needing to save them all.

If no files are selected in the file view then all with be saved anyway.

(c) Cannot select test suites any more.

There wasn't much useful information from test suites in the dynamic GUI, so they've been made unclickable.
This does mean there is no way to view testsuite files or testsuite related data though. Use the static GUI
for this.

(2) performance_test_minimum behaviour changed
==============================================

Previously this setting caused performance figures not to be compared if either the stored or the produced
result was less than it. This behaviour is changed/fixed such that failure is triggered if either is
above it. On upgrading to TextTest 3.8 you may suddenly get tests that are 1000% slower/faster that
you hadn't noticed until now... (if using this setting)


Adding migration notes from file 'MigrationNotes_from_3.6':
It should not be necessary to explicitly migrate anything on upgrading to version 3.7, but note 
that the following behaviour is changed as default:

(1) GUI layout
==============

Version 3.7 includes the biggest GUI changes for some time. The rising tide of complaints that the interface
was non-intuitive and inconvenient in some respects caused me to rethink a few things.

The key aims of the redesign are:

(1) Make common functionality (like "Run Tests") always accessible.
(2) Put related functionality close together on the screen.
(3) Reduce GUI clutter where possible
(4) Improve API testing (where multiple applications are present together)
(5) Reduce the probability of doing something unintentional (Removing a test when trying to run it, for example...)
(6) Improve the code structure

Not bad for simultaneous ambitions!

Changes in the static GUI:
--------------------------
Previously all selection and running functionality has only been available while 
viewing an "application" i.e. the purple lines in the GUI. This made the existence 
of the "View App" button necessary for navigating quickly there. It wasn't very 
intuitive and it led to important functionality being hidden some of the time. 
It could also only be carried out for one application at a time.

It has basically now moved to global, always-visible scope. The buttons "Select", 
"Run Tests" and "Reset" have shifted leftwards to be above the test window (tree view). 
The associated tabs are mixed in with the tabs for whatever is being viewed at the time 
and can also always be seen irrespective of what is being viewed. To avoid massive 
"tab overload", this is achieved by having two hierarchical rows of tabs. So the ones 
associated with the viewed test are under "Test", while the ones that previously could 
only be found from the application are under "Selection" and "Running" respectively.

You can still look at the application rows, but the only major point is to view the 
config files (and now also your personal configuration). The "view app" button is removed.

Where more than one application is run at once, it's worth knowing that selections made 
from the Selection tab now have global scope. There are no longer separate selections per 
application. This is hopefully easier to use.

Previously, all functionality, however obscure, has been blessed with a button in the toolbar. 
This is no longer the case. Only interactive actions that are "frequent use" (as defined by the 
method isFrequentUse) have this quality. The others have their buttons at the bottom of their
respective tabs. The ones that are "frequent use" also have a button at the bottom of the tabs, 
which does the same thing as the one on the toolbar. The basic point is to reduce clutter. At 
present, buttons that do not have associated tabs are on the toolbar whether they are frequent 
use or not though.

Changes in the dynamic GUI
--------------------------
In version 3.6, there were three buttons in TextTest : "Save", "Save All" and "Save Selected". In 
version 3.7 this duplication is removed and there is only one button called "Save". It behaves roughly
like the "Save Selected" button used to: i.e., it will save whichever tests you have selected at 
the time.

"Save All" can be achieved by either selecting all the tests with the mouse, or pressing ctrl-A in 
the test-tree window. That will select all the tests, and you can then press "Save".

The "Saving" tab can still be found where it used to be found, but the difference is that it now 
applies to all tests for all applications. That meant some changes were necessary to its behaviour. 
In particular

- It wasn't possible to keep the behaviour for the "Exact/Average" radio button when saving 
performance (which used to be to default to Exact if other files were different and Average otherwise). 
It now defaults to Exact all the time. I thought that was less confusing as averaging is not always 
expected. If you want to change it to Average, however, you can change it once in one place and
it will stay changed until you change it back again...

- You'll generally see more options in the "Save Single File" drop-down box, as it now takes all the 
files the application can generate, rather than all that are different for that particular test.

- Versions: if you run several different versions in the same GUI the default option will be 
something like <default> - 2,3: meaning that tests will be saved with the version they are run with. 
Changing this to an actual number will cause all to be saved with the same version irrespective of what 
they were run with.

Hopefully this will remove some clutter, anyway. 

(2) Changes to the "Record use-case" functionality
==================================================

- There are two extra fields to allow you to specify which version you wish to record and which checkout to
use. Previously this could only be controlled from the command line.

- The catalogue file is now always ignored when re-recording a test. This will hopefully avoid the problem
where recording is aborted, a catalogue is created saying "no changes" and the test is then re-recorded to edit data.

- It is no longer necessary to have an options file for a test to be recognised as a test. Any directory referred
in the testsuite file is now considered to be a test, and if the options file is not present, no options will be given.
This means that empty options files are no longer needed and will not be created. 

- All use-case recording now works via the dynamic GUI rather than directly on the system under test. The main reason 
for this is to make it more user friendly when mistakes are made in recording. Essentially, the record session is run 
via the dynamic GUI, new files are presented and can be saved as desired, and if nothing is saved, nothing changes and
no auto-replay is run.

- I did some work with the self-tests for this so that recording self-tests that do recording themselves is neater
and more stable. 

(3) Catalogue functionality will sort all files found
=====================================================

So it might change your catalogues if you're using this functionality. Hopefully only
the order in the file will change and it will then be the same.

(4) Default interface is now the static GUI
===========================================

Previously no options meant the console interface. It no longer does unless you set
default_interface:console. It is therefore no longer necessary to explicitly say -gx
on the command line to start the static GUI.

(5) Local links in test data structures that point outside the data
===================================================================

A bug has been fixed whereby local links within test data structures are preserved rather
than made to point to the master copy. A side-effect of this is that links that are local
but point outside the structure (typically via ../ at the top level) will no longer work. 
These will need to be changed to the absolute target location.

Adding migration notes from file 'MigrationNotes_from_3.5':
It should not be necessary to explicitly migrate anything on upgrading to version 3.6, but note 
that the following behaviour is changed as default:

(1) Missing files

In the case where a file is present as a standard file in the test case directory,
but not generated by the test, this will be explicitly classified as a 'missing file'.
Also, when collating other generated files, auto-generated files saying that the file
could not be found are no longer created.

So, if you have files that are old lying around, you'll need to remove or rename them. Likewise,
if you ever saved any such auto-generated error files, you'll need to remove them too. This
should be possible by just running the tests and pressing Save as appropriate.

(2) Test Suites Containing entry in the Select dialogue (-ts flag on command line)

The mechanism for requesting test suites has confused a few people in its time. It therefore
now operates on the whole test suite path rather than on each level separately. This probably
simply makes it more intuitive, but if you've got used to old behaviour you may find it
doesn't do the same thing any more.

(3) Catalogue functionality will now also report file edits as well as creation and deletion

So you might get some differences in catalogues on running with version 3.6 and later. Should
be OK to just save them.

(4) Default text comparison tool on Windows is now 'diff' (as on UNIX)

Diff is installed by default anyway if you've installed tkdiff. It performs much better on larger 
files.

If you used and liked ndiff.py you'll need to set 'text_diff_program:ndiff.py' to maintain the
behaviour.

(5) Dynamic GUI now collapses entirely successful test suites automatically

This has generally been thought to be a good change, but the possibility is there to turn
it off if you don't like it. Set auto_collapse_successful:0 to preserve the old behaviour.

Adding migration notes from file 'MigrationNotes_from_3.4':
(1) Due to resurrected support on Windows, the configuration 'unixConfig'
is no longer present or necessary. The few UNIX-specific things left
are inferrred by running the configuration 'default' on a UNIX system.

In other words, if your config file says
config_module:unixConfig

delete this line.

(2) This applies to anyone who was tried to measure CPU time or memory consumption
with texttest. The config file format of most settings has changed.

Because any number of resource-related files can now be extracted, the settings are 
now more like the batch settings, each is a section, with type names. So, for example,
instead of

performance_test_resource:model=Opteron250

you would now write

[performance_test_resource]
cputime:model=Opteron250

Likewise, minimum_cputime_for_test and minimum_memory_for_test are replaced by

[performance_test_minimum]
cputime:10
memory:5

The name 'cputime' for UNIX time-generated CPU time is hardcoded. The rest you can 
set yourself. Use the entry

[performance_logfile_extractor]
memory:Memory Usage Is

to tell TextTest how to create the file from your log file. (This replaces 'string_before_memory'.) The file name 'memory' no longer has any special meaning.

There is also a new entry, that can tell it to use a file other than the one indicated by log_file
for this purpose: as follows.

[performance_logfile]
memory:output

In summary, the changes are follows:

Old names                               New Names
=========                               =========
performance_test_machine (list)         performance_test_machine (section)
performance_test_resource (list)        performance_test_resource (section)
<cputime|memory>_variation_% (int)      performance_variation_% (section)
minimum_<cputime|memory>_for_test (int) performance_test_minimum (section)
string_before_memory (string)           performance_logfile_extractor (section)

Note for migrators (or checkers): check your sections end correctly. If you have global level 
settings after a section, an [end] marker will be needed to make sure that they don't end up 
in the section! Otherwise they will not be included.

(example)

[performance_test_machine]
cputime:apple

config_module:default

(This will not work as config_module will be entered in the section [performance_test_machine]. Use an [end] marker after the section.) 

Adding migration notes from file 'MigrationNotes_from_3.3':
This only applies to users of the LSF module.

TextTest now integrates with Sun Grid Engine as well as LSF. This has caused the renaming of a few
variables to more generic names than they had before.

In the config file, the
'lsf_queue' entry becomes 'default_queue'

The environment variables
LSF_RESOURCE and LSF_PROCESSES become
QUEUE_SYSTEM_RESOURCE and QUEUE_SYSTEM_PROCESSES respectively. 

Adding migration notes from file 'MigrationNotes_from_3.1':
Version 3.1.1 finally removes the "magical" pre-pend of checkout to relative paths in the environment and 
some config file values. Instead, it exports the environment variable TEXTTEST_CHECKOUT so you can
be explicit about when you want this.

For example, where before you might have said in the config file

binary:source/myprogram

assuming this would be interpreted relative to the checkout, you now need to say

binary:${TEXTTEST_CHECKOUT}/source/myprogram


Adding migration notes from file 'MigrationNotes_from_2.x':
Migration notes from TextTest 2.x
=================================

The new config file format
--------------------------

For TextTest versions up to version 2.0, the types of config file entries
have been inferred from the config files. This has been changed in version 3.0
to the more robust approach of declaring what type is expected in the configuration
via the setConfigDefault method, and print errors if the wrong type, or unrecognised
entries, are found in the config file.

Config file strings, integers and lists are written as before:

my_integer:0

my_string:hello

my_list:first_entry
my_list:second_entry

However, there has not so far been a standard format for dictionary entries. For example,
run-dependent text entries have been written

output:today's date is

Recipients for batch mode have been written

nightjob_recipients:geoff

where 'nighjob' is the name of the batch session

while file collation has been written

collate_file:source_pattern->target_name

This was deemed confusing. Therefore all of these have been standardised to be written in "section format".
So the above examples in TextTest 3.0 should be written as follows:

[run_dependent_text]
output:today's date is
[end]

[batch_recipients]
nightjob:geoff
[end]

[collate_file]
target_name:source_pattern
[end]

Please note: in the case of collate_file, the source and target have turned around, for consistency with run_dependent_text!
(The [end] is also optional if followed by a new section header)

Here is a list of the config file dictionaries that are recognised, and hence need to be written in the
new format:

                        Valid   Format in 2.x
test_colours            All     n/A
file_colours            All     n/A
collate_file            All     collate_file:<source>-><target>
run_dependent_text      All     <target>:<text>
unordered_text          All     n/A
batch_recipients        UNIX    <session>_recipients:<recipients>
batch_timelimit         UNIX    <session>_timelimit:<timelimit>
batch_use_collection    UNIX    <session>_use_collection:true|false
batch_version           UNIX    <session>_version:<version>

Framework API (only relevant if you've written your own configuration)
-------------

(1) API for command line options.

The old methods getSwitches() and getArgumentOptions() are replaced by a new method, addToOptionGroup(), as a method
of declaring what command line options are supported. These switches and options are placed in certain groups, depending on
how they should be shown in the static GUI. In general, each should only be placed in one group.

View an example, for example default.py.

(2) API for config file entries

As indicated above, we now force configurations to announce their config settings in advance and provide default values. 
Therefore, a configuration should call setConfigDefault on each one from the configuration function setApplicationDefault(). 
Types are inferred when reading the config file from the type of default values. app.getConfigList is deprecated, it is 
replaced by app.getConfigValue which returns a wide variety of types.
-------------------------------------------------------

Changing GUI status to: ''

'view migration notes in tab' event created with arguments 'from 3.4'

'press close' event created with arguments ''

'show component version information' event created with arguments ''
---------- Dialog 'Version Information' ----------
Default action is labelled 'gtk-close'
Showing component versions: 
 TextTest: master
 Python: 2.4.3.final.0
 GTK: 2.10.14
 PyGTK: 2.10.6
--------------------------------------------------

Changing GUI status to: ''

'press close' event created with arguments ''

'show information about texttest' event created with arguments ''
---------- Dialog 'About TextTest' ----------
Default action is labelled 'gtk-close'
TextTest is an application-independent tool for text-based
functional testing. This means running a batch-mode program
in lots of different ways, and using the text output produced
as a means of controlling the behaviour of that application.
---------------------------------------------

Changing GUI status to: ''

'press credits' event created with arguments ''
---------- Dialog 'TextTest Credits' ----------
Default action is labelled 'gtk-close'
Showing credits:
Code Maintainer:                                        

    Geoff Bache

Developers:

    Geoff Bache
    Mattias Grönkvist
    Johan Ivarsson
    Johan Andersson

Contributors:

    Patrik Blommaskog
    Per Bergsten
    Emily Bache
    Nicolas Gattario
    Claes Verdoes
    Henning Thornblad
    Michael Behrisch
-----------------------------------------------

'press close' event created with arguments ''

'press license' event created with arguments ''
---------- Dialog 'TextTest License' ----------
Default action is labelled 'gtk-close'
Showing license:
TextTest : tool for automatic system-level acceptance testing
Copyright (c) 2003 Geoff Bache

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details. This can be found
online at http://www.opensource.org/licenses/lgpl-license.php
-----------------------------------------------

'press close' event created with arguments ''

'press versions' event created with arguments ''
---------- Dialog 'Version Information' ----------
Default action is labelled 'gtk-close'
Showing component versions: 
 TextTest: master
 Python: 2.4.3.final.0
 GTK: 2.10.14
 PyGTK: 2.10.6
--------------------------------------------------

'press close' event created with arguments ''

'press close' event created with arguments ''

'quit' event created with arguments ''

Changing GUI status to: 'Removing all temporary files ...'
