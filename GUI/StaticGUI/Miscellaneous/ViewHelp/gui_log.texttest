
Waiting for application event 'all tests to be read' to occur.
Enabling entry completion, using matching 1
Adding entry completion '<default>' ...
Adding entry completion 'localhost' ...
Adding entry completion '1' ...
Adding entry completion '/carm/proj/texttest-tmp/geoff/texttest.23Sep160725.28080/texttest/GUI/StaticGUI/Miscellaneous/ViewHelp/log/logging.debug' ...
Adding entry completion '/users/geoff/work/master/Testing/TextTest/log/logging.debug' ...
Adding entry completion '/carm/proj/texttest-tmp/geoff/texttest.23Sep160725.28080/texttest/GUI/StaticGUI/Miscellaneous/ViewHelp/log' ...
Adding entry completion 'site' ...
Adding entry completion 'personal' ...
Adding entry completion 'all' ...
Setting window width to 60% of screen.
Setting window height to 83% of screen.

---------- Window 'TextTest static GUI : management of tests for DIP' ----------
Focus widget is 'Test Tree'

Menu Bar :
  'File' Menu :
    'Load Selection...' (Stock image 'gtk-open', accelerator 'Shift+Ctrl+O')
      ----
    'Save Selection...' (Stock image 'gtk-save-as', greyed out, accelerator 'Ctrl+D')
      ----
    'Quit' (Stock image 'gtk-quit', accelerator 'Ctrl+Q')
  'Edit' Menu :
    'Add Test' (Stock image 'gtk-add', greyed out, accelerator 'Ctrl+N')
    'Add Suite' (Stock image 'gtk-add', greyed out)
    'Add Application' (Stock image 'gtk-add')
      ----
    'Cut' (Stock image 'gtk-cut', greyed out, accelerator 'Ctrl+X')
    'Copy' (Stock image 'gtk-copy', greyed out, accelerator 'Ctrl+C')
    'Paste' (Stock image 'gtk-paste', greyed out, accelerator 'Ctrl+V')
    'Remove...' (Stock image 'gtk-delete', greyed out, accelerator 'Ctrl+Delete')
    'Rename...' (Stock image 'gtk-italic', greyed out, accelerator 'Ctrl+M')
      ----
    'Enter Failure Information' (Stock image 'gtk-info', greyed out, accelerator 'Ctrl+I')
      ----
    'Move to first' (Stock image 'gtk-goto-top', greyed out, accelerator 'Ctrl+Home')
    'Move up' (Stock image 'gtk-go-up', greyed out, accelerator 'Ctrl+Page Up')
    'Move down' (Stock image 'gtk-go-down', greyed out, accelerator 'Ctrl+Page Down')
    'Move to last' (Stock image 'gtk-goto-bottom', greyed out, accelerator 'Ctrl+End')
      ----
    'Sort Test Suite File' (Stock image 'gtk-sort-ascending', greyed out)
    'Reversed Sort Test Suite File' (Stock image 'gtk-sort-descending', greyed out)
  'View' Menu :
    'Show only selected' (greyed out)
    'Hide selected' (greyed out)
    'Show all'
      ----
    'Toolbar' (checked)
    'Shortcut bar' (checked)
    'Status bar' (checked)
  'Actions' Menu :
    'Select' (Stock image 'gtk-find', accelerator 'Ctrl+S')
    'Filter' (Stock image 'gtk-find', accelerator 'Ctrl+F')
      ----
    'Run' (Stock image 'gtk-execute', greyed out, accelerator 'Ctrl+R')
    'Reconnect' (Stock image 'gtk-connect', greyed out, accelerator 'Shift+Ctrl+R')
    'Record Use-Case' (Stock image 'gtk-media-record', greyed out, accelerator 'F9')
    'Replace Text in Files' (greyed out)
      ----
    'Refresh' (Stock image 'gtk-refresh', accelerator 'F5')
    'Reset' (Stock image 'gtk-revert-to-saved', accelerator 'Ctrl+E')
  'Help' Menu :
    'Quick Start'
    'Migration Notes'
    'Change Logs'
      ----
    'Component Versions'
    'Credits'
    'License'
      ----
    'About TextTest' (Stock image 'gtk-about')

Tool Bar :
  _Quit (Stock image 'gtk-quit', accelerator 'Ctrl+Q', tooltip 'Quit')
    ----
  _Select (Stock image 'gtk-find', accelerator 'Ctrl+S', tooltip 'Select indicated tests')
  _Run (Stock image 'gtk-execute', greyed out, accelerator 'Ctrl+R', tooltip 'Run selected tests')
    ----
  Remove... (Stock image 'gtk-delete', greyed out, accelerator 'Ctrl+Delete', tooltip 'Remove selected files')
...........

Showing Test Tree with columns: Tests: All 0 selected

------------------------------ (vertical pane separator, 50% from the left edge)
...........

Showing Notebook with tabs: Selection , Config
Viewing page 'Selection'
Viewing table with 9 rows and 2 columns.
'Tests for version  ' (tooltip 'Select tests for a specific version.') | Text entry (drop-down list containing ['', '<default>'])
'Test names containing  ' (tooltip 'Select tests for which the name matches the entered text. The text can be a regular expression.') | Text entry
'Suite names containing  ' (tooltip 'Select tests for which at least one parent suite name matches the entered text. The text can be a regular expression.') | Text entry
'App names containing  ' (tooltip 'Select tests for which the application name matches the entered text. The text can be a regular expression.') | Text entry
'Tests listed in file  ' | Text entry , Button '...'
'Descriptions containing  ' (tooltip 'Select tests for which the description (comment) matches the entered text. The text can be a regular expression.') | Text entry
'Test-files containing  ' (tooltip 'Select tests which have a file containing the entered text. The text can be a regular expression : e.g. enter '.*' to only look for the file without checking the contents.') | Text entry
'Test-file to search  ' (tooltip 'When the 'test-files containing' field is non-empty, apply the search in files with the given stem. Unix-style file expansion (note not regular expressions) may be used. For example '*' will look in any file.') | Text entry (drop-down list containing [''])
'Execution time  ' (tooltip 'Specify execution time limits, either as '<min>,<max>', or as a list of comma-separated expressions, such as >=0:45,<=1:00. Digit-only numbers are interpreted as minutes, while colon-separated numbers are interpreted as hours:minutes:seconds.') | Text entry
.....Selection......
Check button 'Select in collapsed suites' (tooltip 'Select in currently collapsed suites as well?')
Radio button 'Discard' (checked) (tooltip 'Unselect all currently selected tests before applying the new selection criteria.') , Radio button 'Refine' (tooltip 'Apply the new selection criteria only to the currently selected tests, to obtain a subselection.') , Radio button 'Extend' (tooltip 'Keep the currently selected tests even if they do not match the new criteria, and extend the selection with all other tests which meet the new criteria.') , Radio button 'Exclude' (tooltip 'After applying the new selection criteria to all tests, unselect the currently selected tests, to exclude them from the new selection.')
Button '_Select' (Stock image 'gtk-find', accelerator 'Ctrl+S', tooltip 'Select indicated tests')
.....Filtering......
Radio button 'Discard' (checked) (tooltip 'Show all tests which match the criteria, and hide all those that do not.') , Radio button 'Refine' (tooltip 'Hide all tests which do not match the criteria. Do not show any tests that aren't already shown.') , Radio button 'Extend' (tooltip 'Show all tests which match the criteria. Do not hide any tests that are currently shown.')
Button 'Filter' (Stock image 'gtk-find', accelerator 'Ctrl+F', tooltip 'filter tests to show only those indicated')
'Shortcuts:' , Button '_New'
...........
'TextTest started at 23Sep16:07:31.' , Non-stock image
--------------------------------------------------------------------------------

Changing GUI status to: 'Reading tests ...'

Updated : Test Tree with columns: Tests: 0/1 selected
-> TargetApp (dip) (grey90)

Column titles changed in Test Tree with columns: Tests: 0/2 selected

Column titles changed in Test Tree with columns: Tests: 0/3 selected

Column titles changed in Test Tree with columns: Tests: 0/4 selected

Column titles changed in Test Tree with columns: Tests: 0/5 selected

Column titles changed in Test Tree with columns: Tests: 0/6 selected

Column titles changed in Test Tree with columns: Tests: 0/7 selected

Column titles changed in Test Tree with columns: Tests: 0/8 selected

Column titles changed in Test Tree with columns: Tests: 0/9 selected

Column titles changed in Test Tree with columns: Tests: 0/10 selected

Column titles changed in Test Tree with columns: Tests: 0/11 selected

Updated : Test Tree with columns: Tests: 0/11 selected
-> TargetApp (dip) (grey90)
->   Game9952 (grey90)
->     S01.99 (grey90)
->     A01 (grey90)
->     S02 (grey90)
->     A02 (grey90)
->     S03 (grey90)
->     A03 (grey90)
->     S04 (grey90)
->     A04 (grey90)
->     S05 (grey90)
->     A05 (grey90)
->   npstIII (grey90)
->     Game47 (grey90)
->       S01 (grey90)
Edited 'Test-file to search' Text entry (set to 'output')

Changing GUI status to: 'Reading tests completed at 23Sep16:07:31.'

Expected application event 'all tests to be read' occurred, proceeding.

'show information about texttest' event created with arguments ''
Adding entry completion 'output' ...

Changing GUI status to: ''

---------- Dialog 'About TextTest' ----------
Default widget is 'gtk-close'
Non-stock image
'TextTest trunk
'
'TextTest is an application-independent tool for text-based
functional testing. This means running a batch-mode program
in lots of different ways, and using the text output produced
as a means of controlling the behaviour of that application.
'
'http://www.texttest.org
'
'Copyright Â© The authors
'
---------------
Button 'gtk-close' (Stock image 'gtk-close')
Button '_Versions'
Button '_License'
Button 'texttest-stock-credits' (Stock image 'texttest-stock-credits')
---------------------------------------------

'go to website' event created with arguments ''

Changing GUI status to: 'Started "firefox http://www.texttest.org" in background.'

'press credits' event created with arguments ''

---------- Dialog 'TextTest Credits' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: Written by
Viewing page 'Written by'

========== GtkTextView ==========
Code Maintainer:                                        

    Geoff Bache

Developers:

    Geoff Bache
    Mattias Grönkvist
    Johan Ivarsson
    Johan Andersson

Contributors:

    Patrik Blommaskog
    Per Bergsten
    Emily Bache
    Nicolas Gattario
    Claes Verdoes
    Henning Thornblad
    Michael Behrisch
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
-----------------------------------------------

'press close' event created with arguments ''

'press license' event created with arguments ''

---------- Dialog 'TextTest License' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: License
Viewing page 'License'

========== GtkTextView ==========
TextTest : tool for automatic system-level acceptance testing
Copyright (c) 2003 Geoff Bache

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details. This can be found
online at http://www.opensource.org/licenses/lgpl-license.php
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
-----------------------------------------------

'press close' event created with arguments ''

'press versions' event created with arguments ''

---------- Dialog 'Version Information' ----------
Default widget is 'gtk-close'
'You are using these versions:
'
Viewing table with 6 rows and 2 columns.
'TextTest:' | 'trunk'
'Python:' | '2.9.42.final.0'
'GTK:' | '2.58.42'
'PyGTK:' | '2.42.0'
'PyGObject:' | '2.61.42'
'GLib:' | '2.74.42'
'
TextTest source directory:'
'/users/geoff/work/master/Testing/TextTest'
---------------
Button 'gtk-close' (Stock image 'gtk-close')
--------------------------------------------------

'press close' event created with arguments ''

'press close' event created with arguments ''

'show texttest migration notes' event created with arguments ''

Changing GUI status to: ''

---------- Dialog 'TextTest Migration Notes' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: from 3.14 , from 3.13 , from 3.12 , from 3.11 , from 3.10 , from 3.9 , from 3.8 , from 3.7 , from 3.6 , from 3.5 , from 3.4 , from 3.3 , from 3.1 , from 2.x
Viewing page 'from 3.14'

========== GtkTextView ==========

The main things that need migrating are version-specific "options" files. Otherwise there are a couple
of changes in behaviour you might want to note.

=========================================================
COMPULSORY MIGRATION
=========================================================
(1) Versioned "options" files.

TextTest 3.15 handles options files much more like e.g. "environment" files and "knownbugs" files have
been handled up until now. It allows them to be placed in test suites and view them as cumulative, i.e. it attempts 
to amalgamate them with each other. This breaks backward compatibility in the case where
you have tests that contain both "options.app" and "options.app.v1" files. For example, if
options.app contains "-a" and options.app.v1 contains "-b", then if you run version v1 of the
test it will now run with "-a -b" rather than just "-b" as before.

Many such versioned files simply add an extra option, if so you just need to delete the repeated options.
The simplest way to restore backward compatibility is to add {CLEAR} to the beginning of the line,
in which case all other options files will be ignored.

You can also for example do {CLEAR -a} which in this case will have the same effect. See the guide
to test suites on the website for more complete documentation of this new feature.

=========================================================
CHANGES IN DEFAULT BEHAVIOUR (OR PROCEDURE)
=========================================================

(1) Dynamic GUI no longer writes to standard output directly
============================================================
It uses the logging mechanism like everything else. To restore the output by
default, copy the log/logging.console file from the TextTest source tree to
$TEXTTEST_PERSONAL_CONFIG/log/logging.gui (i.e. ~/.texttest/log/logging.gui 
unless you repoint the personal configuration directory)

(2) Data file configuration now lives under $TEXTTEST_PERSONAL_CONFIG/etc
=========================================================================
Also for consistency with the log layout. If you have .gtkrc-2.0 or .xml files
for configuring the tool bar in your personal configuration, you'll need to move them
to this subdirectory.

(3) Default "debug" logging file now called logging.debug instead of log4py.conf
================================================================================
For consistency with the above. So you need to go to $TEXTTEST_PERSONAL_CONFIG/log if
you have such a location and do this rename.
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
-------------------------------------------------------

'view migration notes in tab' event created with arguments 'from 3.4'

Current page changed in Notebook with tabs: from 3.14 , from 3.13 , from 3.12 , from 3.11 , from 3.10 , from 3.9 , from 3.8 , from 3.7 , from 3.6 , from 3.5 , from 3.4 , from 3.3 , from 3.1 , from 2.x
Viewing page 'from 3.4'

========== GtkTextView ==========
(1) Due to resurrected support on Windows, the configuration 'unixConfig'
is no longer present or necessary. The few UNIX-specific things left
are inferrred by running the configuration 'default' on a UNIX system.

In other words, if your config file says
config_module:unixConfig

delete this line.

(2) This applies to anyone who was tried to measure CPU time or memory consumption
with texttest. The config file format of most settings has changed.

Because any number of resource-related files can now be extracted, the settings are 
now more like the batch settings, each is a section, with type names. So, for example,
instead of

performance_test_resource:model=Opteron250

you would now write

[performance_test_resource]
cputime:model=Opteron250

Likewise, minimum_cputime_for_test and minimum_memory_for_test are replaced by

[performance_test_minimum]
cputime:10
memory:5

The name 'cputime' for UNIX time-generated CPU time is hardcoded. The rest you can 
set yourself. Use the entry

[performance_logfile_extractor]
memory:Memory Usage Is

to tell TextTest how to create the file from your log file. (This replaces 'string_before_memory'.) The file name 'memory' no longer has any special meaning.

There is also a new entry, that can tell it to use a file other than the one indicated by log_file
for this purpose: as follows.

[performance_logfile]
memory:output

In summary, the changes are follows:

Old names                               New Names
=========                               =========
performance_test_machine (list)         performance_test_machine (section)
performance_test_resource (list)        performance_test_resource (section)
<cputime|memory>_variation_% (int)      performance_variation_% (section)
minimum_<cputime|memory>_for_test (int) performance_test_minimum (section)
string_before_memory (string)           performance_logfile_extractor (section)

Note for migrators (or checkers): check your sections end correctly. If you have global level 
settings after a section, an [end] marker will be needed to make sure that they don't end up 
in the section! Otherwise they will not be included.

(example)

[performance_test_machine]
cputime:apple

config_module:default

(This will not work as config_module will be entered in the section [performance_test_machine]. Use an [end] marker after the section.)
=================================

'press close' event created with arguments ''

'show texttest change logs' event created with arguments ''

Changing GUI status to: ''

---------- Dialog 'TextTest Change Logs' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: trunk , 3.14.1 , 3.14 , 3.13 , 3.12.1 , 3.12 , 3.11.1 , 3.11 , 3.10 , 3.9.1 , 3.9 , 3.8 , 3.7.1 , 3.7 , 3.6 , 3.5.3 , 3.5.2 , 3.5.1 , 3.5 , 3.4 , 3.3 , 3.2 , 3.1.1 , 3.1 , 3.0 , 2.1 , 2.0 , 1.0 , 0.2 , 0.1
Viewing page 'trunk'

========== GtkTextView ==========
General GUI Enhancements:
    - Default search now works! (testtree.py)
	Can select tests just by typing with the test tree highlighted
    - Version dialog shows version of PyGObject and GLib also (helpdialogs.py)
    - Quick Start guide now available from help menu, also credits and license (helpdialogs.py)
Static GUI Enhancements:
    - New "Replace Text in Files" action
	Graphical version of default.ReplaceText script
    - Selection of test suites now reported in test tree header (testtree.py)
	Reports number of suites selected instead of 0 tests
    - Adding a test now adds it to all selected suites (adminactions.py)
	More consistent with behaviour of Rename, Copy etc.
    - Can now use UNIX-style file expansion wildcards (globs) in the "Test-file to search" box in the Selection tab. (default_gui.py)
	Allows looking for text in multiple files simultaneously. Also affects -grepfile on the command line.
    - On creating a new application, can specify at creation time that it is a GUI (default_gui.py)
	Saves on fiddling and restarting the GUI.
    - Default value for "query_kill_processes" changed (default/__init__.py)
	Ask before terminating dynamic GUIs when static GUI is terminated.
    - Performance values displayed in more readable format (textinfo.py)
	Previously in seconds only
    - Tooltips added to the selection tab to aid clarity.
Dynamic GUI Enhancements:
    - Can now rerun tests directly from the dynamic GUI (runningactions.py)
	Saves on saving a selection back to the static GUI, loading it and then rerunning.
    - Selecting files in the file view now also filters the Text Info display below (texttestgui.py)
	So that it only previews what is currently selected.
    - Saved tests are now listed separately in the status view (statusviews.py)
	Makes it easier to track which tests have been saved and which worked by themselves
    - Saved tests make this clear in the Text Info space, recording the time at which they were saved (comparetest.py)
    - "Save As" dialog allows multiple versions for "Version to save previous results as" (changetestresults.py)
	Use comma-separated list which can provide multiple backups of the same file.
    - Can now view original files (filtered and not) from the file view popup menu (fileviewers.py)
    - Can now view files with content-filtering but not order-filtering present (fileviewers.py)
	Useful when "unordered_text" is defined
    - "Annotate" is now called "Set Run Name" and works from the command line / static GUI (housekeeping.py)
	Uses the pre-existing option -name which previously only affected batch mode
    - New base_version "recusecase" for when recording GUI tests
	Works much like the exisiting "rectraffic", i.e. a way to have different configuration only in this case
    - Test tree tooltips now work more reliably and use the builtin support in PyGTK 2.12 (testtree.py)
	They are removed in PyGTK 2.10, was not deemed important enough to keep them there
Framework Enhancements:
    - Can now use "options" files in test suites (default/__init__.py)
	They get combined like "environment" files. See "Test Suite Guide" on the website for more details.
    - Reconnect now picks up all "extra versions" that were originally run (reconnect.py)
	Mainly useful if batch_extra_version was originally supplied
    - New variable TEXTTEST_SANDBOX_ROOT provided
	Refers to the top level of the sandbox structure, can be used for temporary storage shared between tests.
    - New variable TEXTTEST_PATH provided (engine.py)
	Like TEXTTEST_HOME, but allows loading tests from multiple locations into the same process
    - New config setting "performance_ignore_improvements" (performance.py)
	As the name suggests, allows performance testing to only flag when performance degrades.
    - New config setting "save_filtered_file_stems"
	Allows the filtered version of files to be saved instead of the raw output.
    - Floating point filtering now supports relative tolerance (fpdiff.py)
	New config file setting "relative_float_tolerance". Thanks to Michael Behrisch for this.
    - Config setting "suppress_stderr_popup" renamed to "suppress_stderr_text" and used more widely
	Old name still works as an alias. Will now look at stderr from collate scripts and grid engine slaves too.
    - Can now have variable "executable"
	Set a relative path and provide it also in one of the "*_test_path" config settings.
    - Logging more flexible now (default.py)
	Dynamic GUI does not write anything by default. Batch mode writes time stamps by default.
	Debug logging file now called "logging.debug" rather than "log4py.conf". See migration notes
    - Personal toolbar/GTK configuration now lives in "etc" subdirectory (plugins.py)
	Mostly to keep things consistent with "log" locations
    - Generalised --vanilla option (testmodel.py)
	Now have --vanilla site and --vanilla personal
    - New "default_texttest_tmp" config file entry (default/__init__.py)
	Useful for setting a site-wide default, e.g. if a separate disk is used for this purpose
    - Overwrite mode (-o) now displays differences for what it overwrites
Historical HTML Batch Report Enhancements:
    - Separate summary rows are now displayed for each extra version (testoverview.py)
    - With extra versions, the first one also gets given a header row now (testoverview.py)
    - Category ordering is now deterministic, with succeeded tests displayed first (testoverview.py)
Grid Engine (LSF/SGE) enhancements:
    - New config file option "queue_system_min_test_count" (queuesystem/__init__.py)
	Can make sure small numbers of tests get run locally by default, while large numbers use the grid.
    - Slave job handling is now multithreaded (masterprocess.py)
	Hopefully a bit faster and less sensitive to network trouble
    - Errors produced by remote jobs now get reported on master process stderr (masterprocess.py)
	And hence in popups in the static GUI where appropriate.
    - Tests from different applications now interleaved when submitting (masterprocess.py)
	Means one application is less likely to take over all available resources
Self-test/Internal changes:
    - Everything now done via PyUseCase 2.0's new auto-logging. Most custom logging removed from TextTest.
    - Popup menus are now called and shown in the tests.
    - New application event fixes indeterminism problems around tests that kill external viewers.
    - Major GUI code refactoring to create packages as appropriate
    - Lots of work on coverage: tests added, dead code removed, no-coverage pragmas added. Coverage from self-tests now 98.6%
Bug Fixes:
    - Invisible (filtered out) tests will not be run now when a test suite is selected (texttestgui.py)
    - "Create/Import" functionality in static GUI works correctly for directories which previously existed (adminactions.py)
    - Static GUI no longer refuses to start if the "default checkout" can't be found (default/__init__.py)
    - All plugins scripts now reject unknown arguments in a consistent way (plugins.py)
    - Status of tests now synchronised across the GUI, should be harder to get a test green/red somewhere and still yellow
	somewhere else.
    - Observer exceptions no longer fatal (plugins.py)
	Many observers can be in configuration code and shouldn't be allowed to bring down other applications.
    - Pasting a test where there already exists a file of that name now handled gracefully (adminactions.py)
    - Fixed stacktrace removing a suite containing duplicated subsuites (testmodel.py)
    - Traffic mechanism no longer stacktraces if server under test resets its connection (traffic.py)
    - "Show File Properties" in the dynamic GUI no longer shows everything twice for new files (fileviewers.py)
    - Running tests remotely (without grid engine) can now handle illegal shell syntax in test names and environment variables (default.py)
    - Running tests remotely (without grid engine) now gets correct values for TEXTTEST_SANDBOX
    - Running tests remotely (without grid engine) now works in conjunction with automatic performance measurement (default.py)
    - Killing remote tests started with SSH now works (default/__init__.py)
	SSH doesn't forward signals unfortunately...
    - Auto-replay the correct test when recording if static GUI test selection changes in the meantime (adminactions.py)
    - Refining a selection containing test suites now works properly (selectandfilter.py)
	Previously lost all test suites
    - Now produce a warning for duplicated sections in "knownbugs" files (knownbugs/__init__.py)
	Silently ignored previously
    - Importing files now preserves permissions correctly (adminactions.py)
    - Crashed virtual servers are now restarted after each test, preventing multiple tests failing for the same crash (virtualdisplay.py)
    - Grouping of tests in the dynamic GUI is disabled if their diffs are longer than the maximum to display (statusviews.py)
	Could lead to false grouping and hence incorrect saves
    - Credits dialog no longer mangled in locales which aren't Latin-1 compatible (helpdialogs.py)
    - Added error messages for locale encoding problems (guiutils.py)
    - Errors when collating now get shown in the GUI (sandbox.py)
    - "collate_file" is now done before "discard_file" (sandbox.py)
	Means you can "rename" files by collating them to a new name and then discarding the original one.
    - Fixed occasional confusion in the dynamic GUI when tests are both "collapsed" and "hidden" (testtree.py)
Grid Engine (LSF/SGE) Bug Fixes:
    - Don't reuse slave jobs that get killed after the test completes (masterprocess.py)
    - Don't send tests for re-use whose submission has been cancelled (queuesystem/masterprocess.py)
    - Reduced keepalive timeout to 5 minutes, 2 hours is rather a long time in a test context (masterprocess.py)
    - Don't fall over if SUT leaves child processes running from the slave (slavejobs.py)
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
---------------------------------------------------

'view change logs in tab' event created with arguments '3.7.1'

Current page changed in Notebook with tabs: trunk , 3.14.1 , 3.14 , 3.13 , 3.12.1 , 3.12 , 3.11.1 , 3.11 , 3.10 , 3.9.1 , 3.9 , 3.8 , 3.7.1 , 3.7 , 3.6 , 3.5.3 , 3.5.2 , 3.5.1 , 3.5 , 3.4 , 3.3 , 3.2 , 3.1.1 , 3.1 , 3.0 , 2.1 , 2.0 , 1.0 , 0.2 , 0.1
Viewing page '3.7.1'

========== GtkTextView ==========
Framework enhancements:
    - Plugin scripts (-s option) will no longer be rejected by the framework if no tests are found (engine.py)
	- sometimes they only act on the application anyway.
    - A couple of config file defaults changed: 
	"view_program" now defaults to "emacs" rather than "xemacs" on UNIX, as it is slightly more universally available
	"slow_motion_replay_speed" defaults to 3 instead of 0 (this was more or less a bug)
LSF/SGE enhancements:
    - Unrunnable tests will always report the machine they run on (engine.py)
	Previously some "hard" failures could cause the machine not to be reported
    - performance_test_resource entry now works when machine names in SGE are 'short' (sge.py)
	Previously it only worked if the full domain name was in SGE.
    - If tests report as running but then get terminated hard (e.g. SIGKILL), report them as "killed" (queuesystem.py)
	Previously reported confusingly as "abandoned" - but there was nothing to abandon
    - Finding information in older accounting files in SGE now works (sge.py)
	There has been code lying around to do this for some time but it's never worked until now...
Bug Fixes:
    - Fixed crash on removing tests after starting static GUI from scratch (texttestgui.py,testmodel.py)
	Showed up if the GUI was started with only a config file available.
    - Removing last test from a test suite now removes it from the GUI display also (texttestgui.py)
    - Test completion time on progress bar is now always correct (texttestgui.py)
	It tended to update itself to the current time when clicking around...
    - Collation of files to names containing "." characters is now forbidden (default.py)
	It violates TextTest's naming conventions and hence causes trouble
    - 'Text Info' and 'Viewing' tabs now always appear in the same order (guiplugins.py)
	Viewing tests that were pending in SGE/LSF could cause them to switch before.
    - No longer show spurious files in the static GUI if full temporary path contains "." characters (testmodel.py)
    - External viewers can be started even if the path to the file contains spaces (guiplugins.py)
    - If the script for interpreting core files on UNIX fails, it no longer causes a TextTest crash (predict.py)
    - Fixed crash when an extra_version is rejected for a batch run via batch_version (engine.py)
    - Test data identified by environment variables can now be used as keys in "test_data_searchpath" (default.py)
    - Disable interactive dialogue in console interface after ^C has been pressed (respond.py)
Test Fixes:
    - A certain amount of work done stablising the self-tests and reducing the probability of occasional failures, 
      particularly the tests for SGE/LSF.
=================================

'press close' event created with arguments ''

'show component version information' event created with arguments ''

---------- Dialog 'Version Information' ----------
Default widget is 'gtk-close'
'You are using these versions:
'
Viewing table with 6 rows and 2 columns.
'TextTest:' | 'trunk'
'Python:' | '2.9.42.final.0'
'GTK:' | '2.58.42'
'PyGTK:' | '2.42.0'
'PyGObject:' | '2.61.42'
'GLib:' | '2.74.42'
'
TextTest source directory:'
'/users/geoff/work/master/Testing/TextTest'
---------------
Button 'gtk-close' (Stock image 'gtk-close')
--------------------------------------------------

'press close' event created with arguments ''

'show texttest credits' event created with arguments ''

---------- Dialog 'TextTest Credits' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: Written by
Viewing page 'Written by'

========== GtkTextView ==========
Code Maintainer:                                        

    Geoff Bache

Developers:

    Geoff Bache
    Mattias Grönkvist
    Johan Ivarsson
    Johan Andersson

Contributors:

    Patrik Blommaskog
    Per Bergsten
    Emily Bache
    Nicolas Gattario
    Claes Verdoes
    Henning Thornblad
    Michael Behrisch
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
-----------------------------------------------

'press close' event created with arguments ''

'show texttest quick start' event created with arguments ''

Changing GUI status to: ''

---------- Dialog 'TextTest Quick Start' ----------
Default widget is 'gtk-close'

Showing Notebook with tabs: Quick Start
Viewing page 'Quick Start'

========== GtkTextView ==========
To get started quickly, take a look in the self-tests. There are various "TargetApp" directories
to be found. Each of these contains a test-suite for a simple program (which are in turn part
of the larger test suite for TextTest, as it tests itself testing these programs)

To run these apps by hand, go to the TargetApp directory in question and call it, via

texttest -gx  (static GUI - allows management of tests and starting dynamic GUI)
texttest -g   (dynamic GUI - runs tests and shows results in GUI)
texttest -con (console interface)

To understand the test suite, there is always a file called config.<app> (and maybe a few more for 
versions). This tells texttest about the application in question. If nothing else it will have an 
entry called "executable" (or "binary", which is a back-compatibility alias) to tell you what 
executable is being tested.

There will also be a file called testsuite.<app>. This lists subdirectories to be considered either 
as test cases or test suites themselves. Applies recursively you can find the directories which 
represent tests.

A test can define command-line options via the options.<app> file, and also standard input contents 
via the input.<app> file. For GUIs it can define use-case style actions to be performed on the GUI via
the usecase.<app> file. Anything else under the test is "standard results", for example output.<app> 
for the standard output and errors.<app> for the standard error. When the test is run these will be 
compared with the actual results from running the program with the input as defined.

What there is to find:

TargetApp                                  : used by default as it's very basic, this test suite has
                                               one test (that fails) on a "Hello World" program.

TestSelf/TestSelection/TargetApp           : Contains a few tests with related names, to explore the
                                               functionality for selecting tests and saving those selections.

TestSelf/ChangeTestResults/TargetApp       : Contains a few tests that fail in various ways, to explore
                                               how these are reported and how the results can be saved.

TestSelf/RunDependentText/TargetApp        : useful for understanding the run-dependent text filtering

TestSelf/EnvironmentFile/TargetApp         : useful for understanding how environment variables are 
                                               set and unset

TestSelf/DiagnosticHandling/TargetApp      : useful for understanding integration with log4py, log4j 
                                               and log4cpp to configuration of produced logs.

TestSelf/TestData/TargetApp                : useful for understanding how TextTest handles test data, and
                                               the differences between data that is only to be read and that
                                               which can also be written.

TestSelf/CollateFiles/TargetApp            : useful for understanding how TextTest collects files of any
                                               name written by an application

TestSelf/Checkouts/TargetApp               : useful for understanding how the checkout mechanism for 
                                               version control integration works.

TestSelf/BatchTests/TargetApp              : useful for understanding how batch mode works (both plain-text 
                                             and HTML reports)

TestSelf/MemoryTests/TargetApp             : useful for understanding how memory consumption is compared

TestSelf/PerformanceTests/TargetApp        : useful for understanding how performance-related info is in general 
                                             compared by extracting and comparing numbers from log files.

TestSelf/KnownBugs/TargetApp               : useful for finding out how textual patterns are identified
                                               as known bugs, and also linked to bugs in Bugzilla

TestSelf/RunningTests/TargetApp            : shows how you can view your tests before
                                               they compmlete in the dynamic GUI

TestSelf/BaseVersions/TargetApp            : shows how to get version settings to inherit from each other.

TestSelf/ExtraVersions/TargetApp           : shows how to automatically run other versions than the default
                                               when running normally.

TestSelf/UITesting/GUI/TargetApp           : useful for understanding TextTest's integration with Use Case
                                               Recorders such as PyUseCase and JUseCase for GUI testing.

GUI/DynamicGUI/Filtering/TargetApp         : useful for exploring the status tab from the dynamic GUI and what
                                             it can do.

GUI/DynamicGUI/TextView/TargetApp          : mostly on unicode handling

GUI/StaticGUI/TargetApp                    : fairly large suite that's a residue of the previous default one.

GUI/StaticGUI/StartFromScratch/TargetApp   : useful for getting a handle on what a totally empty test suite
                                               should look like

TestSelf/TrafficInterception/TargetApp     : useful for understanding how TextTest can record and replay
                                               results from "third-party" programs run on the command line
                                               and thus produce repeatable results.

TestSelf/TrafficInterception/ClientServer/TargetApp
                                             : useful for undestanding how TextTest can record and replay 
                                               textual traffic on a network connection, allowing creation
                                               of component tests for client/server systems.

TestSelf/BatchTests/CollectFiles/TargetApp : useful for understanding how batch reporting works.

TestSelf/EmptyTestSuites/TargetApp         : useful for understanding how TextTest handles various unusual
                                               things in the testsuite files.

TestSelf/PerformanceTests/UnixOnly/TargetApp :
                                             (UNIX only) shows how performance can be extracted directly via the "time" program

TestSelf/CollateFiles/UnixOnly/TargetApp   : (UNIX only) useful for understanding core file processing

TestSelf/Miscellaneous/UnixOnly/TargetApp  : (UNIX only) useful for understanding how the virtual display
                                               integration with Xvfb works (to prevent application GUIs popping up)

QueueSystems/TargetApp                     : useful for understanding the queuesystem configuration and
                                               the associated plugin for LSF and Sun Grid Engine


Once you've browsed these a bit and can read them, you might start using the actual self-tests to see how 
TextTest itself works and what features it has...
=================================
---------------
Button 'gtk-close' (Stock image 'gtk-close')
---------------------------------------------------

'press close' event created with arguments ''

'quit' event created with arguments ''
