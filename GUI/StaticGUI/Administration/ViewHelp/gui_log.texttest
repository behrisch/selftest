Top Window title is TextTest static GUI : management of tests for DIP
Default widget is <type 'gtk.TreeView'>
Setting window width to 60% of screen.
Setting window height to 83% of screen.

Viewing toggle action with title '_Toolbar'
Viewing toggle action with title '_Shortcut bar'
Viewing toggle action with title '_Status bar'
Viewing action with title '_Quit', stock id ''gtk-quit'', accelerator ''<control>q''
Viewing action with title 'View File' (greyed out)
Viewing action with title '_Select', stock id ''gtk-refresh'', accelerator ''<control>s''
Viewing action with title '_Run', stock id ''gtk-execute'', accelerator ''<control>r'' (greyed out)
Viewing action with title 'R_eset', stock id ''gtk-revert-to-saved'', accelerator ''<control>e''
Viewing action with title '_Rename...', stock id ''gtk-italic'', accelerator ''<control>m'' (greyed out)
Viewing action with title 'Remove...', stock id ''gtk-delete'' (greyed out)
Viewing action with title '_Sort Test Suite File', stock id ''gtk-sort-ascending'' (greyed out)
Viewing action with title '_Reversed Sort Test Suite File', stock id ''gtk-sort-descending'' (greyed out)
Viewing action with title 'Move to first', stock id ''gtk-goto-top'', accelerator ''<control>Home'' (greyed out)
Viewing action with title 'Move up', stock id ''gtk-go-up'', accelerator ''<control>Page_Up'' (greyed out)
Viewing action with title 'Move down', stock id ''gtk-go-down'', accelerator ''<control>Page_Down'' (greyed out)
Viewing action with title 'Move to last', stock id ''gtk-goto-bottom'', accelerator ''<control>End'' (greyed out)
Viewing action with title 'Re_connect', stock id ''gtk-connect'', accelerator ''<control><shift>r'' (greyed out)
Viewing action with title '_Load Selection...', stock id ''gtk-open'', accelerator ''<control><shift>o''
Viewing action with title 'S_ave Selection...', stock id ''gtk-save-as'', accelerator ''<control><shift>s'' (greyed out)
Viewing action with title '_Migration Notes'
Viewing action with title 'Component _Versions'
Viewing action with title '_About TextTest', stock id ''gtk-about''

UI layout: 
<ui>
  <menubar name="MainMenuBar">
    <menu name="filemenu" action="filemenu">
      <placeholder name="FirstInFileMenu">
        <menuitem name="Load Selection..." action="Load Selection..."/>
        <separator/>
      </placeholder>
      <menuitem name="Save Selection..." action="Save Selection..."/>
      <separator/>
      <menuitem name="Quit" action="Quit"/>
    </menu>
    <menu name="editmenu" action="editmenu">
      <menuitem name="Rename..." action="Rename..."/>
      <menuitem name="Remove..." action="Remove..."/>
      <separator/>
      <menuitem name="Move to first" action="Move to first"/>
      <menuitem name="Move up" action="Move up"/>
      <menuitem name="Move down" action="Move down"/>
      <menuitem name="Move to last" action="Move to last"/>
      <separator/>
      <menuitem name="Sort Test Suite File" action="Sort Test Suite File"/>
      <menuitem name="Reversed Sort Test Suite File" action="Reversed Sort Test Suite File"/>
      <separator/>
    </menu>
    <menu name="viewmenu" action="viewmenu">
      <menuitem name="Toolbar" action="Toolbar"/>
      <menuitem name="Shortcut bar" action="Shortcut bar"/>
      <menuitem name="Status bar" action="Status bar"/>
    </menu>
    <placeholder name="ExtraMenus">
      <menu name="actionsmenu" action="actionsmenu">
        <menuitem name="Select" action="Select"/>
        <menuitem name="Run" action="Run"/>
        <menuitem name="Reconnect" action="Reconnect"/>
        <menuitem name="Reset" action="Reset"/>
      </menu>
    </placeholder>
    <menu name="helpmenu" action="helpmenu">
      <menuitem name="Migration Notes" action="Migration Notes"/>
      <separator/>
      <menuitem name="Component Versions" action="Component Versions"/>
      <separator/>
      <menuitem name="About TextTest" action="About TextTest"/>
    </menu>
  </menubar>
  <toolbar name="MainToolBar">
    <toolitem name="Quit" action="Quit"/>
    <separator/>
    <toolitem name="Select" action="Select"/>
    <toolitem name="Run" action="Run"/>
    <placeholder name="AfterRun">
    </placeholder>
    <separator/>
    <toolitem name="Remove..." action="Remove..."/>
    <separator/>
  </toolbar>
  <popup name="TestPopupMenu">
    <menuitem name="Rename..." action="Rename..."/>
    <menuitem name="Remove..." action="Remove..."/>
    <separator/>
    <menu name="reordermenu" action="reordermenu">
      <menuitem name="Move to first" action="Move to first"/>
      <menuitem name="Move up" action="Move up"/>
      <menuitem name="Move down" action="Move down"/>
      <menuitem name="Move to last" action="Move to last"/>
      <separator/>
      <menuitem name="Sort Test Suite File" action="Sort Test Suite File"/>
      <menuitem name="Reversed Sort Test Suite File" action="Reversed Sort Test Suite File"/>
      <separator/>
    </menu>
  </popup>
  <popup name="TestFilePopupMenu">
    <menuitem name="View File" action="View File"/>
    <separator/>
    <menuitem name="Remove..." action="Remove..."/>
    <separator/>
  </popup>
</ui>

Test Tree description...
-> TargetApp (dip)
->   Game9952
->     S01.99
->     A01
->     S02
->     A02
->     S03
->     A03
->     S04
->     A04
->     S05
->     A05
->   npstIII
->     Game47
->       S01

Test column header set to 'Tests: 0/11 selected'

Pane separator positioned 50% from the left edge

Tabs showing : Selection, Config

Viewing notebook page for 'Selection'
Viewing entry for option 'Tests for version' (drop-down list containing ['', '<default>'])
Viewing entry for option 'Test names containing'
Viewing entry for option 'Tests listed in file'
Viewing entry for option 'Suite names containing'
Viewing entry for option 'Result files containing'
Viewing entry for option 'Result file to search' (set to 'output')
Viewing entry for option 'Execution time'
Viewing check button for switch 'Select in collapsed suites'
Viewing radio button for switch 'Current selection:', options Discard/Refine/Extend/Exclude'. Default value 0.
Viewing action with title '_Select'

Changing GUI status to: 'TextTest started at 04Apr14:48:50.'

'show texttest migration notes' event created with arguments ''

Changing GUI status to: ''
Adding migration notes from file 'MigrationNotes_from_3.7':
Following on from the GUI changes in 3.7, version 3.8 is also a release which emphasises GUI
improvements. TextTest hopefully looks more like other GUIs than it used to: it has a proper
menubar, a proper toolbar and even some icons.

First, we should discuss compulsory migration though, then the GUI differences are discussed 
below.

=============================================================================================
COMPULSORY MIGRATION
=============================================================================================

(1) System requirements for GUI
===============================
GUI now requires at least Python 2.3 and PyGTK 2.4. (3.7.1 supported Python 2.2 and PyGTK 2.2)

(2) Config file changes
=======================

a) The "batch_version" setting now has no effect by default. You need to also set 
"batch_use_version_filtering:true" before anything will happen. This is because this mechanism
is only needed in a few circumstances (typically multi-release, multi-platform testing)
and it isn't really expected when batch sessions fail just because you run a version it wasn't
expecting.

b) "add_status_bar" and "add_shortcut_bar" are removed. In their place is a generic section
[hide_gui_element] (note it has the opposite sense!). This can have keys "menubar", "toolbar",
"shortcut_bar" and "status_bar" to achieve the same thing. Note these can also be hidden
at runtime using the View menu now so the need for them should be reduced.

c) "internal_error_text" and "internal_compulsory_text" are removed (see Section 3)

(3) Knownbugs files
===================

The format of these has been completely changed as it became unwieldy as more and more features
were added (and the files can now be generated directly from the GUI). A migration script 
is provided: if you have any knownbugs files you should run it
on your whole suite to convert them all to the new format:

texttest.py -s knownbugs.MigrateFiles

Each "bug" now gets a section to itself. It's probably easiest to use the static GUI to
report them in future rather than learning the new format though.

(4) Internal error settings
===========================

As reported above, the old Internal Errors mechanism is removed. The functionality is now covered
entirely by the Known Bugs mechanism. There is a migration script for this too:

texttest.py -s knownbugs.MigrateInternalErrors

Unfortunately, the relevant config file entries will simply be rejected by TextTest 3.8 though, so to use
this migration you'll need to temporarily re-insert them. Edit default.py, search for the setConfigDefault
statements and add there

app.setConfigDefault("internal_error_text", [])
app.setConfigDefault("internal_compulsory_text", [])

=============================================================================================
CHANGES IN BEHAVIOUR OF EXISTING FEATURES
=============================================================================================

(1) GUI layout
==============

In the past months TextTest has begun to be used by a lot of people who aren't developers. This
led to quite a few further usability enhancement requests.

General: Unifying the "viewed test" and the "selected tests"
------------------------------------------------------------
In TextTest 3.7.1 and earlier tests needed to be double clicked in the tree view to be viewed,
while they could be selected via a single click. It was quite possible to be viewing a different
test than the one(s) that were selected. As some actions acted on the viewed test and others
on the selected tests this caused confusion.

Therefore there is no longer any separate concept. Selecting a single test (single-clicking it)
will also view it. Good news for those who got RSI from all the double-clicking in TextTest :)

All the elements relating to the test that is being viewed are placed under a separate "Test" tab.
This tab is hidden when no tests are selected, but automatically chosen when tests are viewed. It
is also hidden in the static GUI when multiple tests are selected, though in the dynamic GUI it
remains as a "sample", as when saving multiple tests this information is often useful.

Changes in the static GUI 
-------------------------
(a) Viewing the config files in the static GUI

The old purple "application" rows are removed from the test tree view altogether now.
There is now a separate tab "Config" which displays the config files for all applications
together and also the personal configuration files, if any.

(b) Running options

Previously the Running options were subdivided into 4 groups, "What to Run", "How to Run",
"Side Effects" and "SGE/LSF". These are now regrouped into 2 tabs, "Basic" and "Advanced".
Hopefully the important stuff is easier to find.

(c) Reconnecting to previous results

Reconnecting to previously run results has previously been done by setting the "reconnect"
options in the running tabs and then pressing "Run". This is now separated and has its
own tab and button under the Running tab and is hopefully easier to use and more intuitive.

(d) New Files tab (replaces New Diagnostics button)

If you'd enabled TextTest's integration with log4x you'd have seen a "New Diagnostics" button
before, that helped create new log4x configuration files in the test structure. This is now
generalised and can create any sort of file of interest to TextTest. (It still works by
copying from more general places in the test suite and opening an editor). There is a tab
"New Files" under the Test tab.

Changes in the dynamic GUI
--------------------------
(a) Viewing running tests

Previously, whenever a yellow running test was selected, TextTest went off and gathered dynamic
information on how far through it was reckoned to be and created a partial comparison based on this.
This made it unwieldly to navigate the test tree view with the keyboard, as each test passed
over tried to get this information.

It is therefore no longer collected by default. A button called "Update Info" will perform this task
when requested. Note that running tests cannot be compared in tkdiff or equivalent until this
button is pressed now.

(b) Saving partial results

In version 3.7 there was a "Save Singel file" drop-down list under the Saving tab which could be used 
to save a single file from a test result without needing to save them all. This is now removed. Instead, 
(multi-)select the files from the file view. This also means that several files can be saved at once 
without needing to save them all.

If no files are selected in the file view then all with be saved anyway.

(c) Cannot select test suites any more.

There wasn't much useful information from test suites in the dynamic GUI, so they've been made unclickable.
This does mean there is no way to view testsuite files or testsuite related data though. Use the static GUI
for this.

(2) performance_test_minimum behaviour changed
==============================================

Previously this setting caused performance figures not to be compared if either the stored or the produced
result was less than it. This behaviour is changed/fixed such that failure is triggered if either is
above it. On upgrading to TextTest 3.8 you may suddenly get tests that are 1000% slower/faster that
you hadn't noticed until now... (if using this setting)
Adding migration notes from file 'MigrationNotes_from_3.6':
It should not be necessary to explicitly migrate anything on upgrading to version 3.7, but note 
that the following behaviour is changed as default:

(1) GUI layout
==============

Version 3.7 includes the biggest GUI changes for some time. The rising tide of complaints that the interface
was non-intuitive and inconvenient in some respects caused me to rethink a few things.

The key aims of the redesign are:

(1) Make common functionality (like "Run Tests") always accessible.
(2) Put related functionality close together on the screen.
(3) Reduce GUI clutter where possible
(4) Improve API testing (where multiple applications are present together)
(5) Reduce the probability of doing something unintentional (Removing a test when trying to run it, for example...)
(6) Improve the code structure

Not bad for simultaneous ambitions!

Changes in the static GUI:
--------------------------
Previously all selection and running functionality has only been available while 
viewing an "application" i.e. the purple lines in the GUI. This made the existence 
of the "View App" button necessary for navigating quickly there. It wasn't very 
intuitive and it led to important functionality being hidden some of the time. 
It could also only be carried out for one application at a time.

It has basically now moved to global, always-visible scope. The buttons "Select", 
"Run Tests" and "Reset" have shifted leftwards to be above the test window (tree view). 
The associated tabs are mixed in with the tabs for whatever is being viewed at the time 
and can also always be seen irrespective of what is being viewed. To avoid massive 
"tab overload", this is achieved by having two hierarchical rows of tabs. So the ones 
associated with the viewed test are under "Test", while the ones that previously could 
only be found from the application are under "Selection" and "Running" respectively.

You can still look at the application rows, but the only major point is to view the 
config files (and now also your personal configuration). The "view app" button is removed.

Where more than one application is run at once, it's worth knowing that selections made 
from the Selection tab now have global scope. There are no longer separate selections per 
application. This is hopefully easier to use.

Previously, all functionality, however obscure, has been blessed with a button in the toolbar. 
This is no longer the case. Only interactive actions that are "frequent use" (as defined by the 
method isFrequentUse) have this quality. The others have their buttons at the bottom of their
respective tabs. The ones that are "frequent use" also have a button at the bottom of the tabs, 
which does the same thing as the one on the toolbar. The basic point is to reduce clutter. At 
present, buttons that do not have associated tabs are on the toolbar whether they are frequent 
use or not though.

Changes in the dynamic GUI
--------------------------
In version 3.6, there were three buttons in TextTest : "Save", "Save All" and "Save Selected". In 
version 3.7 this duplication is removed and there is only one button called "Save". It behaves roughly
like the "Save Selected" button used to: i.e., it will save whichever tests you have selected at 
the time.

"Save All" can be achieved by either selecting all the tests with the mouse, or pressing ctrl-A in 
the test-tree window. That will select all the tests, and you can then press "Save".

The "Saving" tab can still be found where it used to be found, but the difference is that it now 
applies to all tests for all applications. That meant some changes were necessary to its behaviour. 
In particular

- It wasn't possible to keep the behaviour for the "Exact/Average" radio button when saving 
performance (which used to be to default to Exact if other files were different and Average otherwise). 
It now defaults to Exact all the time. I thought that was less confusing as averaging is not always 
expected. If you want to change it to Average, however, you can change it once in one place and
it will stay changed until you change it back again...

- You'll generally see more options in the "Save Single File" drop-down box, as it now takes all the 
files the application can generate, rather than all that are different for that particular test.

- Versions: if you run several different versions in the same GUI the default option will be 
something like <default> - 2,3: meaning that tests will be saved with the version they are run with. 
Changing this to an actual number will cause all to be saved with the same version irrespective of what 
they were run with.

Hopefully this will remove some clutter, anyway. 

(2) Changes to the "Record use-case" functionality
==================================================

- There are two extra fields to allow you to specify which version you wish to record and which checkout to
use. Previously this could only be controlled from the command line.

- The catalogue file is now always ignored when re-recording a test. This will hopefully avoid the problem
where recording is aborted, a catalogue is created saying "no changes" and the test is then re-recorded to edit data.

- It is no longer necessary to have an options file for a test to be recognised as a test. Any directory referred
in the testsuite file is now considered to be a test, and if the options file is not present, no options will be given.
This means that empty options files are no longer needed and will not be created. 

- All use-case recording now works via the dynamic GUI rather than directly on the system under test. The main reason 
for this is to make it more user friendly when mistakes are made in recording. Essentially, the record session is run 
via the dynamic GUI, new files are presented and can be saved as desired, and if nothing is saved, nothing changes and
no auto-replay is run.

- I did some work with the self-tests for this so that recording self-tests that do recording themselves is neater
and more stable. 

(3) Catalogue functionality will sort all files found
=====================================================

So it might change your catalogues if you're using this functionality. Hopefully only
the order in the file will change and it will then be the same.

(4) Default interface is now the static GUI
===========================================

Previously no options meant the console interface. It no longer does unless you set
default_interface:console. It is therefore no longer necessary to explicitly say -gx
on the command line to start the static GUI.

(5) Local links in test data structures that point outside the data
===================================================================

A bug has been fixed whereby local links within test data structures are preserved rather
than made to point to the master copy. A side-effect of this is that links that are local
but point outside the structure (typically via ../ at the top level) will no longer work. 
These will need to be changed to the absolute target location.
Adding migration notes from file 'MigrationNotes_from_3.5':
It should not be necessary to explicitly migrate anything on upgrading to version 3.6, but note 
that the following behaviour is changed as default:

(1) Missing files

In the case where a file is present as a standard file in the test case directory,
but not generated by the test, this will be explicitly classified as a 'missing file'.
Also, when collating other generated files, auto-generated files saying that the file
could not be found are no longer created.

So, if you have files that are old lying around, you'll need to remove or rename them. Likewise,
if you ever saved any such auto-generated error files, you'll need to remove them too. This
should be possible by just running the tests and pressing Save as appropriate.

(2) Test Suites Containing entry in the Select dialogue (-ts flag on command line)

The mechanism for requesting test suites has confused a few people in its time. It therefore
now operates on the whole test suite path rather than on each level separately. This probably
simply makes it more intuitive, but if you've got used to old behaviour you may find it
doesn't do the same thing any more.

(3) Catalogue functionality will now also report file edits as well as creation and deletion

So you might get some differences in catalogues on running with version 3.6 and later. Should
be OK to just save them.

(4) Default text comparison tool on Windows is now 'diff' (as on UNIX)

Diff is installed by default anyway if you've installed tkdiff. It performs much better on larger 
files.

If you used and liked ndiff.py you'll need to set 'text_diff_program:ndiff.py' to maintain the
behaviour.

(5) Dynamic GUI now collapses entirely successful test suites automatically

This has generally been thought to be a good change, but the possibility is there to turn
it off if you don't like it. Set auto_collapse_successful:0 to preserve the old behaviour.
Adding migration notes from file 'MigrationNotes_from_3.4':
(1) Due to resurrected support on Windows, the configuration 'unixConfig'
is no longer present or necessary. The few UNIX-specific things left
are inferrred by running the configuration 'default' on a UNIX system.

In other words, if your config file says
config_module:unixConfig

delete this line.

(2) This applies to anyone who was tried to measure CPU time or memory consumption
with texttest. The config file format of most settings has changed.

Because any number of resource-related files can now be extracted, the settings are 
now more like the batch settings, each is a section, with type names. So, for example,
instead of

performance_test_resource:model=Opteron250

you would now write

[performance_test_resource]
cputime:model=Opteron250

Likewise, minimum_cputime_for_test and minimum_memory_for_test are replaced by

[performance_test_minimum]
cputime:10
memory:5

The name 'cputime' for UNIX time-generated CPU time is hardcoded. The rest you can 
set yourself. Use the entry

[performance_logfile_extractor]
memory:Memory Usage Is

to tell TextTest how to create the file from your log file. (This replaces 'string_before_memory'.) The file name 'memory' no longer has any special meaning.

There is also a new entry, that can tell it to use a file other than the one indicated by log_file
for this purpose: as follows.

[performance_logfile]
memory:output

In summary, the changes are follows:

Old names                               New Names
=========                               =========
performance_test_machine (list)         performance_test_machine (section)
performance_test_resource (list)        performance_test_resource (section)
<cputime|memory>_variation_% (int)      performance_variation_% (section)
minimum_<cputime|memory>_for_test (int) performance_test_minimum (section)
string_before_memory (string)           performance_logfile_extractor (section)

Note for migrators (or checkers): check your sections end correctly. If you have global level 
settings after a section, an [end] marker will be needed to make sure that they don't end up 
in the section! Otherwise they will not be included.

(example)

[performance_test_machine]
cputime:apple

config_module:default

(This will not work as config_module will be entered in the section [performance_test_machine]. Use an [end] marker after the section.)
Adding migration notes from file 'MigrationNotes_from_3.3':
This only applies to users of the LSF module.

TextTest now integrates with Sun Grid Engine as well as LSF. This has caused the renaming of a few
variables to more generic names than they had before.

In the config file, the
'lsf_queue' entry becomes 'default_queue'

The environment variables
LSF_RESOURCE and LSF_PROCESSES become
QUEUE_SYSTEM_RESOURCE and QUEUE_SYSTEM_PROCESSES respectively.
Adding migration notes from file 'MigrationNotes_from_3.1':
Version 3.1.1 finally removes the "magical" pre-pend of checkout to relative paths in the environment and 
some config file values. Instead, it exports the environment variable TEXTTEST_CHECKOUT so you can
be explicit about when you want this.

For example, where before you might have said in the config file

binary:source/myprogram

assuming this would be interpreted relative to the checkout, you now need to say

binary:${TEXTTEST_CHECKOUT}/source/myprogram
Adding migration notes from file 'MigrationNotes_from_2.x':
Migration notes from TextTest 2.x
=================================

The new config file format
--------------------------

For TextTest versions up to version 2.0, the types of config file entries
have been inferred from the config files. This has been changed in version 3.0
to the more robust approach of declaring what type is expected in the configuration
via the setConfigDefault method, and print errors if the wrong type, or unrecognised
entries, are found in the config file.

Config file strings, integers and lists are written as before:

my_integer:0

my_string:hello

my_list:first_entry
my_list:second_entry

However, there has not so far been a standard format for dictionary entries. For example,
run-dependent text entries have been written

output:today's date is

Recipients for batch mode have been written

nightjob_recipients:geoff

where 'nighjob' is the name of the batch session

while file collation has been written

collate_file:source_pattern->target_name

This was deemed confusing. Therefore all of these have been standardised to be written in "section format".
So the above examples in TextTest 3.0 should be written as follows:

[run_dependent_text]
output:today's date is
[end]

[batch_recipients]
nightjob:geoff
[end]

[collate_file]
target_name:source_pattern
[end]

Please note: in the case of collate_file, the source and target have turned around, for consistency with run_dependent_text!
(The [end] is also optional if followed by a new section header)

Here is a list of the config file dictionaries that are recognised, and hence need to be written in the
new format:

                        Valid   Format in 2.x
test_colours            All     n/A
file_colours            All     n/A
collate_file            All     collate_file:<source>-><target>
run_dependent_text      All     <target>:<text>
unordered_text          All     n/A
batch_recipients        UNIX    <session>_recipients:<recipients>
batch_timelimit         UNIX    <session>_timelimit:<timelimit>
batch_use_collection    UNIX    <session>_use_collection:true|false
batch_version           UNIX    <session>_version:<version>

Framework API (only relevant if you've written your own configuration)
-------------

(1) API for command line options.

The old methods getSwitches() and getArgumentOptions() are replaced by a new method, addToOptionGroup(), as a method
of declaring what command line options are supported. These switches and options are placed in certain groups, depending on
how they should be shown in the static GUI. In general, each should only be placed in one group.

View an example, for example default.py.

(2) API for config file entries

As indicated above, we now force configurations to announce their config settings in advance and provide default values. 
Therefore, a configuration should call setConfigDefault on each one from the configuration function setApplicationDefault(). 
Types are inferred when reading the config file from the type of default values. app.getConfigList is deprecated, it is 
replaced by app.getConfigValue which returns a wide variety of types.

'view migration notes in tab' event created with arguments 'from 3.4'

'press close' event created with arguments ''

'show component version information' event created with arguments ''

Changing GUI status to: ''
Showing component versions: 
 TextTest: 3.8.current
 Python: 2.4.3.final.0
 GTK: 2.6.9
 PyGTK: 2.6.3

'press close' event created with arguments ''

'show information about texttest' event created with arguments ''

Changing GUI status to: ''

'press credits' event created with arguments ''
Showing credits:
Code Maintainer:                                        

    Geoff Bache

Developers:

    Geoff Bache
    Mattias Grönkvist
    Johan Ivarsson
    Johan Andersson

Contributors:

    Patrik Blommaskog
    Per Bergsten
    Emily Bache
    Nicolas Gattario
    Claes Verdoes

'press close' event created with arguments ''

'press license' event created with arguments ''
Showing license:
TextTest : tool for automatic system-level acceptance testing
Copyright (c) 2003 Geoff Bache

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
Lesser General Public License for more details. This can be found
online at http://www.opensource.org/licenses/lgpl-license.php

'press close' event created with arguments ''

'press versions' event created with arguments ''
Showing component versions: 
 TextTest: 3.8.current
 Python: 2.4.3.final.0
 GTK: 2.6.9
 PyGTK: 2.6.3

'press close' event created with arguments ''

'press close' event created with arguments ''

'quit' event created with arguments ''

Changing GUI status to: 'Quitting TextTest ...'
