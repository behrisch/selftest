
import_config_file:carmusr_generic

# A cut-down version of the matador module
config_module:matador_basic

# Program that we're testing
executable:${CARMSYS}/bin/MATADORbatch.sh

# run-dependent text for each file produced
# Please add text to remove from comparison files
# separated from the file concerned by a semicolon
# The last is a test that differs in master and carmen_9 due to leg output changing for Picador
[run_dependent_text]
errors:ILOG CPLEX 9.000{WORD 11}
errors:Error! Pid
errors:locale
errors:Load ETABLE{WORD -1}
errors:DriverMgr
errors:cpu time
errors:ap_getinfo_util
errors:No recorder available
errors:TERM environment variable
errors:File "/users
errors:ImportError: from module
errors:CARMSYS
errors:is submitted to queue
errors:map_coterminal_file is not defined in current rule set
errors:Loading carmen ... done
errors:xset:  unable to open display
errors:read_po_file{WORD -1}
errors:StorageHandler
output:{INTERNAL writedir}{REPLACE <texttest_tmp_dir>}
output:Free space for{WORD -2}
output:--Timers--{->}--Timers End--
output:Cpu time
output:cpu time
output:Date/Time
output:Host machine
output:Time to solve
output:Time spent
output:clock time
output:locale
output:Matador library date
output:Generation time
output:Generation speed
output:Optimization time
output:library version
output:rule-set at
output:CARMSYS
output:CARMTMP
output:CARMUSR
output:Using Filer to load SubPlan
output:SUBPLAN
output:Subplan
output:ARGS
output:Written Solution to
output:PERSONAL_AZ_CONFIG
output:Loading carmen ... done
output:lookupFile
output:SGE jobid
output:Could not execute pdl{WORD -1}
output:Undefined.*pdl{WORD -1}
output:Expected number of columns{WORD 1}
output:Couldn't obtain information{->}No such file
output:Didn't find result field{WORD -1}
output:Didn't find key field actype in table{WORD -1}
output:ETable scanner ignoring token{WORD 1}
# Remove this for now, until a stable optimizer_time_limit test exists
output:IP solver did not find
# PYTHONHOME set on sparc and ia64, don't care...
output:PYTHONHOME
output:PATH=
maxRosterFinder:time
xpressLog:Reading Problem
[end]

# Failure severity. Determines how differences are reported.
# Only severity 1 differences will actually fail the test, the rest affect only the details column.
# Defaults are output/errors 1, performance/memory 2, other 3. Crashes, internal errors, unrunnable tests are always 1
[failure_severity]
solution:1
errors:2
output:2
performance:3
[end]

# Full name. If not present, capitalised extension is used. Must be one word.
full_name:Matador

# Collect the solution
[collate_file]
solution:APC_FILES/best_solution
[end]

link_test_path:secret_parameters.etab

# ---------------- Values required by the performance module -------------------

# Performance machines/groups. Performance is only compared if these machines are used for test execution
[performance_test_resource]
cputime:model=Opteron250

# How much variation in performance do we allow, in percentage of total runtime? 
[performance_variation_%]
cputime:7

# How long (in seconds) must a test be before performance comparison is used?
[performance_test_minimum]
cputime:10
[end]

# The maximum amount of cpu time a test can take and be submitted to the short queue.
maximum_cputime_for_short_queue:5

# How long (in minutes) must a test be before we only bother to run the test on a performance machine?
min_time_for_performance_force:60

# ---------------- Values required by the Carmen module -------------------

# What needs to be built by the rule compiler. Enforcing GPC is really a cheat here
# to get round the fact TextTest doesn't know how to combine two different ruleset builds...
rave_name:matador
rave_name:gpc
